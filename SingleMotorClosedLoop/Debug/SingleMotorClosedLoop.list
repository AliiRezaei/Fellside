
SingleMotorClosedLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a5c  08000a64  00001a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a5c  08000a5c  00001a64  2**0
                  CONTENTS
  4 .ARM          00000000  08000a5c  08000a5c  00001a64  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a5c  08000a64  00001a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a5c  08000a5c  00001a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a60  08000a60  00001a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001a64  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002e03  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bbf  00000000  00000000  00004897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000290  00000000  00000000  00005458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d2  00000000  00000000  000056e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d73  00000000  00000000  000058ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004c99  00000000  00000000  0001f62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7f0  00000000  00000000  000242c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b1ab6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008c8  00000000  00000000  000b1afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000b23c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a44 	.word	0x08000a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a44 	.word	0x08000a44

080001c8 <main>:
 */

#include "main.h"

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0
	// system clock configuration
	rcc_SysClock_Config();
 80001ce:	f000 f959 	bl	8000484 <rcc_SysClock_Config>

	// systick timer configuration
	rcc_SysTick_Config();
 80001d2:	f000 f9bf 	bl	8000554 <rcc_SysTick_Config>

	// timer 3 PWM configuration
	tim_TIM3_3PWM_Config();
 80001d6:	f000 f9ff 	bl	80005d8 <tim_TIM3_3PWM_Config>

	// timer 2 Delay configuration
	tim_TIM2_Delay_Config();
 80001da:	f000 faa1 	bl	8000720 <tim_TIM2_Delay_Config>

	// i2c magnetic sensor configuration
	i2c_I2C1_Config();
 80001de:	f000 f83f 	bl	8000260 <i2c_I2C1_Config>
	// let test as5600
	// as5600 sensor instance
	Sensor_s sensor;

	// init sensor
	sensor_Init(&sensor);
 80001e2:	463b      	mov	r3, r7
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fb27 	bl	8000838 <sensor_Init>

	while(1)
	{
		sensor_Update(&sensor);
 80001ea:	463b      	mov	r3, r7
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fb97 	bl	8000920 <sensor_Update>
		tim_TIM2_Delay_ms(100);
 80001f2:	2064      	movs	r0, #100	@ 0x64
 80001f4:	f000 faf5 	bl	80007e2 <tim_TIM2_Delay_ms>
		sensor_Update(&sensor);
 80001f8:	bf00      	nop
 80001fa:	e7f6      	b.n	80001ea <main+0x22>

080001fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <SystemInit+0x20>)
 8000202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000206:	4a05      	ldr	r2, [pc, #20]	@ (800021c <SystemInit+0x20>)
 8000208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800020c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <as5600_ReadRawAngle>:
/*
 * @brief  : as5600 read raw angle resister
 * @retval : raw angle register data
 */
uint16_t as5600_ReadRawAngle(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	// read MSB
	uint8_t MSB   = i2c_I2C1_Read(AS5600_ADDR, AS5600_RAWANGLE_REG_MSB);
 8000226:	210c      	movs	r1, #12
 8000228:	2036      	movs	r0, #54	@ 0x36
 800022a:	f000 f89f 	bl	800036c <i2c_I2C1_Read>
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]

	// read LSB
	uint8_t LSB   = i2c_I2C1_Read(AS5600_ADDR, AS5600_RAWANGLE_REG_LSB);
 8000232:	210d      	movs	r1, #13
 8000234:	2036      	movs	r0, #54	@ 0x36
 8000236:	f000 f899 	bl	800036c <i2c_I2C1_Read>
 800023a:	4603      	mov	r3, r0
 800023c:	71bb      	strb	r3, [r7, #6]

	// construct data and mask it in 12 bit
	uint16_t data = ((MSB << 8) | LSB) & 0xFFF;
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	021b      	lsls	r3, r3, #8
 8000242:	b21a      	sxth	r2, r3
 8000244:	79bb      	ldrb	r3, [r7, #6]
 8000246:	b21b      	sxth	r3, r3
 8000248:	4313      	orrs	r3, r2
 800024a:	b21b      	sxth	r3, r3
 800024c:	b29b      	uxth	r3, r3
 800024e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000252:	80bb      	strh	r3, [r7, #4]
	return data;
 8000254:	88bb      	ldrh	r3, [r7, #4]
}
 8000256:	4618      	mov	r0, r3
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <i2c_I2C1_Config>:
/*
 * @brief : I2C1 configuration for communicating with as5600
 * @note  : PB6 --> SCL, PB7 --> SDA
 */
void i2c_I2C1_Config(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
	// enable GPIOB and I2C1 clocks
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // enable GPIOB clock
 8000264:	4b21      	ldr	r3, [pc, #132]	@ (80002ec <i2c_I2C1_Config+0x8c>)
 8000266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000268:	4a20      	ldr	r2, [pc, #128]	@ (80002ec <i2c_I2C1_Config+0x8c>)
 800026a:	f043 0302 	orr.w	r3, r3, #2
 800026e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;  // enable I2C1 clock
 8000270:	4b1e      	ldr	r3, [pc, #120]	@ (80002ec <i2c_I2C1_Config+0x8c>)
 8000272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000274:	4a1d      	ldr	r2, [pc, #116]	@ (80002ec <i2c_I2C1_Config+0x8c>)
 8000276:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800027a:	6413      	str	r3, [r2, #64]	@ 0x40

	// configure PB6 and PB7 as Alternate Function (AF4 for I2C1)
	GPIOB->MODER  &=~ (GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 800027c:	4b1c      	ldr	r3, [pc, #112]	@ (80002f0 <i2c_I2C1_Config+0x90>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1b      	ldr	r2, [pc, #108]	@ (80002f0 <i2c_I2C1_Config+0x90>)
 8000282:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |=  (GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1);
 8000288:	4b19      	ldr	r3, [pc, #100]	@ (80002f0 <i2c_I2C1_Config+0x90>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a18      	ldr	r2, [pc, #96]	@ (80002f0 <i2c_I2C1_Config+0x90>)
 800028e:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |=  (GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 8000294:	4b16      	ldr	r3, [pc, #88]	@ (80002f0 <i2c_I2C1_Config+0x90>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a15      	ldr	r2, [pc, #84]	@ (80002f0 <i2c_I2C1_Config+0x90>)
 800029a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800029e:	6053      	str	r3, [r2, #4]
	GPIOB->AFR[0] |=  (4 << GPIO_AFRL_AFSEL6_Pos) | (4 << GPIO_AFRL_AFSEL7_Pos);
 80002a0:	4b13      	ldr	r3, [pc, #76]	@ (80002f0 <i2c_I2C1_Config+0x90>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a12      	ldr	r2, [pc, #72]	@ (80002f0 <i2c_I2C1_Config+0x90>)
 80002a6:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 80002aa:	6213      	str	r3, [r2, #32]

	// reset I2C1
	I2C1->CR1 |=  I2C_CR1_SWRST;
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a10      	ldr	r2, [pc, #64]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002b6:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &=~ I2C_CR1_SWRST;
 80002b8:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002c2:	6013      	str	r3, [r2, #0]

	// set I2C1 frequency (APB1 clock = 42 MHz)
	I2C1->CR2 = 42;
 80002c4:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002c6:	222a      	movs	r2, #42	@ 0x2a
 80002c8:	605a      	str	r2, [r3, #4]

	// configure I2C clock control for 400 kHz (Fast Mode)
	I2C1->CCR   = 210;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002cc:	22d2      	movs	r2, #210	@ 0xd2
 80002ce:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = 43;
 80002d0:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002d2:	222b      	movs	r2, #43	@ 0x2b
 80002d4:	621a      	str	r2, [r3, #32]

	// enable I2C1 peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 80002d6:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a06      	ldr	r2, [pc, #24]	@ (80002f4 <i2c_I2C1_Config+0x94>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6013      	str	r3, [r2, #0]
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40020400 	.word	0x40020400
 80002f4:	40005400 	.word	0x40005400

080002f8 <i2c_I2C1_Write>:
 * @param :
 *          addr --> device i2c address
 *          reg  --> device register for writing
 */
void i2c_I2C1_Write(uint8_t addr, uint8_t reg)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
    // start condition
    I2C1->CR1 |= I2C_CR1_START;
 8000308:	4b17      	ldr	r3, [pc, #92]	@ (8000368 <i2c_I2C1_Write+0x70>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a16      	ldr	r2, [pc, #88]	@ (8000368 <i2c_I2C1_Write+0x70>)
 800030e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000312:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000314:	bf00      	nop
 8000316:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <i2c_I2C1_Write+0x70>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <i2c_I2C1_Write+0x1e>

    // send device address with write (0)
    I2C1->DR = (addr << 1);              // shift slave address
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4a10      	ldr	r2, [pc, #64]	@ (8000368 <i2c_I2C1_Write+0x70>)
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));  // wait for send slave address
 800032a:	bf00      	nop
 800032c:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <i2c_I2C1_Write+0x70>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f9      	beq.n	800032c <i2c_I2C1_Write+0x34>
    (void)I2C1->SR2;                     // clear ADDR flag
 8000338:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <i2c_I2C1_Write+0x70>)
 800033a:	699b      	ldr	r3, [r3, #24]

    // send register address
    I2C1->DR = reg;                      // slave register address
 800033c:	4a0a      	ldr	r2, [pc, #40]	@ (8000368 <i2c_I2C1_Write+0x70>)
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_TXE));   // wait for complete transmission
 8000342:	bf00      	nop
 8000344:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <i2c_I2C1_Write+0x70>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0f9      	beq.n	8000344 <i2c_I2C1_Write+0x4c>

    // stop condition
    I2C1->CR1 |= I2C_CR1_STOP;
 8000350:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <i2c_I2C1_Write+0x70>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a04      	ldr	r2, [pc, #16]	@ (8000368 <i2c_I2C1_Write+0x70>)
 8000356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800035a:	6013      	str	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40005400 	.word	0x40005400

0800036c <i2c_I2C1_Read>:
 * @param :
 *          addr --> device i2c address
 *          reg  --> device register for reading
 */
uint8_t i2c_I2C1_Read(uint8_t addr, uint8_t reg)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	460a      	mov	r2, r1
 8000376:	71fb      	strb	r3, [r7, #7]
 8000378:	4613      	mov	r3, r2
 800037a:	71bb      	strb	r3, [r7, #6]
	// init data
    uint8_t data = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]

    // write register address
    i2c_I2C1_Write(addr, reg);
 8000380:	79ba      	ldrb	r2, [r7, #6]
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	4611      	mov	r1, r2
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ffb6 	bl	80002f8 <i2c_I2C1_Write>

    // restart condition for reading
    I2C1->CR1 |= I2C_CR1_START; 	     // start condition
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 8000392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000396:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));    // wait for it
 8000398:	bf00      	nop
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <i2c_I2C1_Read+0x2e>

    // send device address with read (1)
    I2C1->DR = (addr << 1) | 1;          // shift address with read bit
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	f043 0201 	orr.w	r2, r3, #1
 80003ae:	4b10      	ldr	r3, [pc, #64]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 80003b0:	611a      	str	r2, [r3, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));  // wait for complete transmission
 80003b2:	bf00      	nop
 80003b4:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f003 0302 	and.w	r3, r3, #2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f9      	beq.n	80003b4 <i2c_I2C1_Read+0x48>
    (void)I2C1->SR2;                     // clear ADDR flag
 80003c0:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 80003c2:	699b      	ldr	r3, [r3, #24]

    // read MSB
    while(!(I2C1->SR1 & I2C_SR1_RXNE));
 80003c4:	bf00      	nop
 80003c6:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f9      	beq.n	80003c6 <i2c_I2C1_Read+0x5a>
    data = (uint8_t)(I2C1->DR & 0xff);
 80003d2:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	73fb      	strb	r3, [r7, #15]

    // stop condition
    I2C1->CR1 |= I2C_CR1_STOP;
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <i2c_I2C1_Read+0x84>)
 80003de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003e2:	6013      	str	r3, [r2, #0]

    return data;
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40005400 	.word	0x40005400

080003f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000402:	2b00      	cmp	r3, #0
 8000404:	db0c      	blt.n	8000420 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	f003 021f 	and.w	r2, r3, #31
 800040c:	4907      	ldr	r1, [pc, #28]	@ (800042c <__NVIC_ClearPendingIRQ+0x38>)
 800040e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000412:	095b      	lsrs	r3, r3, #5
 8000414:	2001      	movs	r0, #1
 8000416:	fa00 f202 	lsl.w	r2, r0, r2
 800041a:	3360      	adds	r3, #96	@ 0x60
 800041c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	e000e100 	.word	0xe000e100

08000430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	2b00      	cmp	r3, #0
 8000442:	db0a      	blt.n	800045a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	490c      	ldr	r1, [pc, #48]	@ (800047c <__NVIC_SetPriority+0x4c>)
 800044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044e:	0112      	lsls	r2, r2, #4
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	440b      	add	r3, r1
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000458:	e00a      	b.n	8000470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4908      	ldr	r1, [pc, #32]	@ (8000480 <__NVIC_SetPriority+0x50>)
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	f003 030f 	and.w	r3, r3, #15
 8000466:	3b04      	subs	r3, #4
 8000468:	0112      	lsls	r2, r2, #4
 800046a:	b2d2      	uxtb	r2, r2
 800046c:	440b      	add	r3, r1
 800046e:	761a      	strb	r2, [r3, #24]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000e100 	.word	0xe000e100
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <rcc_SysClock_Config>:
 * 		    HCLK   168 MHz
 * 		    APB1    42 MHz
 *		    APB2    84 MHz
 */
void rcc_SysClock_Config(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	// enable HSE
	RCC->CR |= RCC_CR_HSEON;               // HSE on
 8000488:	4b2e      	ldr	r3, [pc, #184]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a2d      	ldr	r2, [pc, #180]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 800048e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000492:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)) {;} // wait for it
 8000494:	bf00      	nop
 8000496:	4b2b      	ldr	r3, [pc, #172]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f9      	beq.n	8000496 <rcc_SysClock_Config+0x12>

	// select HSE as PLL source
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC_HSE);
 80004a2:	4b28      	ldr	r3, [pc, #160]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	4a27      	ldr	r2, [pc, #156]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004ac:	6053      	str	r3, [r2, #4]

	// PLL prescalers
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLM); // clear previous
 80004ae:	4b25      	ldr	r3, [pc, #148]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004b0:	685a      	ldr	r2, [r3, #4]
 80004b2:	4924      	ldr	r1, [pc, #144]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004b4:	4b24      	ldr	r3, [pc, #144]	@ (8000548 <rcc_SysClock_Config+0xc4>)
 80004b6:	4013      	ands	r3, r2
 80004b8:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |=  (0 << RCC_PLLCFGR_PLLP_Pos)                               // PLLP =   2
 80004ba:	4b22      	ldr	r3, [pc, #136]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	4921      	ldr	r1, [pc, #132]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004c0:	4b22      	ldr	r3, [pc, #136]	@ (800054c <rcc_SysClock_Config+0xc8>)
 80004c2:	4313      	orrs	r3, r2
 80004c4:	604b      	str	r3, [r1, #4]
	             |   (336 << RCC_PLLCFGR_PLLN_Pos)                             // PLLN = 336
			     |   (8 << RCC_PLLCFGR_PLLM_Pos)                               // PLLM =   8
			     |   (7 << RCC_PLLCFGR_PLLQ_Pos);                              // PLLQ =   7

	// enable main PLL
	RCC->CR |= RCC_CR_PLLON;               // main PLL on
 80004c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004d0:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)) {;} // wait for it
 80004d2:	bf00      	nop
 80004d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0f9      	beq.n	80004d4 <rcc_SysClock_Config+0x50>

	// APB1, APB2, AHB prescalers
	RCC->CFGR &= ~(RCC_CFGR_PPRE2 | RCC_CFGR_PPRE1); // clear previous
 80004e0:	4b18      	ldr	r3, [pc, #96]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4a17      	ldr	r2, [pc, #92]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004e6:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80004ea:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (0b100 << RCC_CFGR_PPRE2_Pos)      // APB2 prescalers = 2
 80004ec:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004f2:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 80004f6:	6093      	str	r3, [r2, #8]
	          |   (0b101 << RCC_CFGR_PPRE1_Pos);     // APB1 prescalers = 4
	RCC->CFGR &= ~ RCC_CFGR_HPRE;                    // AHB not divided
 80004f8:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 80004fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000502:	6093      	str	r3, [r2, #8]

	// proper flash latency for SYSCLK = 168 MHz
	FLASH->ACR &= ~ FLASH_ACR_LATENCY;     // clear previous
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <rcc_SysClock_Config+0xcc>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a11      	ldr	r2, [pc, #68]	@ (8000550 <rcc_SysClock_Config+0xcc>)
 800050a:	f023 0307 	bic.w	r3, r3, #7
 800050e:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=   FLASH_ACR_LATENCY_5WS; // 5 wait states for 168 MHz
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <rcc_SysClock_Config+0xcc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <rcc_SysClock_Config+0xcc>)
 8000516:	f043 0305 	orr.w	r3, r3, #5
 800051a:	6013      	str	r3, [r2, #0]

	// PLL selected as system clock
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 8000522:	f043 0302 	orr.w	r3, r3, #2
 8000526:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & RCC_CFGR_SWS)) {;}  // wait for it
 8000528:	bf00      	nop
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <rcc_SysClock_Config+0xc0>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	f003 030c 	and.w	r3, r3, #12
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <rcc_SysClock_Config+0xa6>
}
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800
 8000548:	fffc8000 	.word	0xfffc8000
 800054c:	07005408 	.word	0x07005408
 8000550:	40023c00 	.word	0x40023c00

08000554 <rcc_SysTick_Config>:
/*
 * @brief : SysTick Timer Configuration
 * @note  : adjusted in 1ms regarding 168 MHz system clock
 */
void rcc_SysTick_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// clear control register to disable SysTick at beginning
	SysTick->CTRL = 0;
 8000558:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <rcc_SysTick_Config+0x30>)
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]

	// set reload value regarding SYSCLK value (168 MHz)
	SysTick->LOAD = 168000 - 1;
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <rcc_SysTick_Config+0x30>)
 8000560:	4a09      	ldr	r2, [pc, #36]	@ (8000588 <rcc_SysTick_Config+0x34>)
 8000562:	605a      	str	r2, [r3, #4]

	// priority SysTick interrupt
	NVIC_SetPriority(SysTick_IRQn, 0);
 8000564:	2100      	movs	r1, #0
 8000566:	f04f 30ff 	mov.w	r0, #4294967295
 800056a:	f7ff ff61 	bl	8000430 <__NVIC_SetPriority>

	// reset SysTick value to zero
	SysTick->VAL = 0;
 800056e:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <rcc_SysTick_Config+0x30>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]

	// enable SysTick from CTRL
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk    // enable SysTick counter
 8000574:	4b03      	ldr	r3, [pc, #12]	@ (8000584 <rcc_SysTick_Config+0x30>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a02      	ldr	r2, [pc, #8]	@ (8000584 <rcc_SysTick_Config+0x30>)
 800057a:	f043 0307 	orr.w	r3, r3, #7
 800057e:	6013      	str	r3, [r2, #0]
	              |  SysTick_CTRL_CLKSOURCE_Msk // CPU clock as SysTick source
			      |  SysTick_CTRL_TICKINT_Msk;  // enable interrupt
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	e000e010 	.word	0xe000e010
 8000588:	0002903f 	.word	0x0002903f

0800058c <SysTick_Handler>:

/*
 * @brief : SysTick Timer Interrupt Request Handler
 */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	// clear pending
	NVIC_ClearPendingIRQ(SysTick_IRQn);
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f7ff ff2e 	bl	80003f4 <__NVIC_ClearPendingIRQ>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <__NVIC_EnableIRQ>:
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4907      	ldr	r1, [pc, #28]	@ (80005d4 <__NVIC_EnableIRQ+0x38>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <tim_TIM3_3PWM_Config>:
 *          Center aligned mode 3
 *          Frequency 25 KHz
 *          PWM mode 1
 */
void tim_TIM3_3PWM_Config(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	// enable clocks for GPIOA and GPIOB
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 80005dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000710 <tim_TIM3_3PWM_Config+0x138>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	4a4b      	ldr	r2, [pc, #300]	@ (8000710 <tim_TIM3_3PWM_Config+0x138>)
 80005e2:	f043 0303 	orr.w	r3, r3, #3
 80005e6:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA6, PA7 to alternate function (TIM3_CH1, TIM3_CH2) AF2
	GPIOA->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 80005e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a49      	ldr	r2, [pc, #292]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 80005ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80005f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1); // Alternate Function
 80005f4:	4b47      	ldr	r3, [pc, #284]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a46      	ldr	r2, [pc, #280]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 80005fa:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80005fe:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000600:	4b44      	ldr	r3, [pc, #272]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	4a43      	ldr	r2, [pc, #268]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 8000606:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800060a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  ((0x2 << (6 * 4)) | (0x2 << (7 * 4))); // AF2 for TIM3
 800060c:	4b41      	ldr	r3, [pc, #260]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	4a40      	ldr	r2, [pc, #256]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 8000612:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000616:	6213      	str	r3, [r2, #32]

	// set PB0 to alternate function (TIM3_CH3) AF2
	GPIOB->MODER &= ~(GPIO_MODER_MODER0);
 8000618:	4b3f      	ldr	r3, [pc, #252]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a3e      	ldr	r2, [pc, #248]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 800061e:	f023 0303 	bic.w	r3, r3, #3
 8000622:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (GPIO_MODER_MODER0_1); // Alternate Function
 8000624:	4b3c      	ldr	r3, [pc, #240]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a3b      	ldr	r2, [pc, #236]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0xF << (0 * 4));
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	4a38      	ldr	r2, [pc, #224]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 8000636:	f023 030f 	bic.w	r3, r3, #15
 800063a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  (0x2 << (0 * 4)); // AF2 for TIM3
 800063c:	4b36      	ldr	r3, [pc, #216]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 800063e:	6a1b      	ldr	r3, [r3, #32]
 8000640:	4a35      	ldr	r2, [pc, #212]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	6213      	str	r3, [r2, #32]

	// set speed, push-pull
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR7;
 8000648:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4a31      	ldr	r2, [pc, #196]	@ (8000714 <tim_TIM3_3PWM_Config+0x13c>)
 800064e:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000652:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0;
 8000654:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <tim_TIM3_3PWM_Config+0x140>)
 800065a:	f043 0303 	orr.w	r3, r3, #3
 800065e:	6093      	str	r3, [r2, #8]

	// enable TIM3 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000660:	4b2b      	ldr	r3, [pc, #172]	@ (8000710 <tim_TIM3_3PWM_Config+0x138>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a2a      	ldr	r2, [pc, #168]	@ (8000710 <tim_TIM3_3PWM_Config+0x138>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40

	// center aligned mode 3
	TIM3->CR1 &= ~TIM_CR1_CMS;
 800066c:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a2a      	ldr	r2, [pc, #168]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 8000672:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000676:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |=  TIM_CR1_CMS_1 | TIM_CR1_CMS_0; // CMS = 11
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 800067e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000682:	6013      	str	r3, [r2, #0]

	// set auto reload value and prescaler
	TIM3->ARR = 1680 - 1; // because of APB1 clock is 168 MHz and center aligned mode 3
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 8000686:	f240 628f 	movw	r2, #1679	@ 0x68f
 800068a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 0;
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

	// configure CH1, CH2 in CCMR1 (PWM mode 1, preload enable)
	TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 8000692:	4b22      	ldr	r3, [pc, #136]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a21      	ldr	r2, [pc, #132]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 8000698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800069c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80006a0:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=  (6 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006a8:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80006ac:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=  (6 << TIM_CCMR1_OC2M_Pos) | TIM_CCMR1_OC2PE;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a1a      	ldr	r2, [pc, #104]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006b4:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80006b8:	6193      	str	r3, [r2, #24]

	// configure CH3 in CCMR2
	TIM3->CCMR2 &= ~TIM_CCMR2_OC3M;
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a17      	ldr	r2, [pc, #92]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80006c4:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= (6 << TIM_CCMR2_OC3M_Pos) | TIM_CCMR2_OC3PE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a14      	ldr	r2, [pc, #80]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006cc:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80006d0:	61d3      	str	r3, [r2, #28]

	// enable outputs
	TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E;
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006d4:	6a1b      	ldr	r3, [r3, #32]
 80006d6:	4a11      	ldr	r2, [pc, #68]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006d8:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6213      	str	r3, [r2, #32]

	// enable auto reload preload
	TIM3->CR1 |= TIM_CR1_ARPE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ec:	6013      	str	r3, [r2, #0]

	// force update to load registers
	TIM3->EGR |= TIM_EGR_UG;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a0a      	ldr	r2, [pc, #40]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6153      	str	r3, [r2, #20]

	// start timer
	TIM3->CR1 |= TIM_CR1_CEN;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a07      	ldr	r2, [pc, #28]	@ (800071c <tim_TIM3_3PWM_Config+0x144>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6013      	str	r3, [r2, #0]
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000
 8000718:	40020400 	.word	0x40020400
 800071c:	40000400 	.word	0x40000400

08000720 <tim_TIM2_Delay_Config>:
 * @note  :
 *          milliseconds and microseconds are available
 *          so, timer counting-up and overflow each 1ms
 */
void tim_TIM2_Delay_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // enable TIM2 clock
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <tim_TIM2_Delay_Config+0x4c>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a10      	ldr	r2, [pc, #64]	@ (800076c <tim_TIM2_Delay_Config+0x4c>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40

    // set auto reload and prescaler values
    TIM2->ARR = 1000 - 1; // because of APB1 clock is 42 MHz
 8000730:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000734:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000738:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->PSC = 84 - 1;
 800073a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800073e:	2253      	movs	r2, #83	@ 0x53
 8000740:	629a      	str	r2, [r3, #40]	@ 0x28

    TIM2->DIER |= TIM_DIER_UIE; // enable update interrupt
 8000742:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 8000752:	201c      	movs	r0, #28
 8000754:	f7ff ff22 	bl	800059c <__NVIC_EnableIRQ>

    TIM2->CR1 |= TIM_CR1_CEN;   // start timer
 8000758:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800

08000770 <TIM2_IRQHandler>:

/*
 * @brief : Timer 2 Interrupt Request Handler
 */
void TIM2_IRQHandler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
    if(TIM2->SR & TIM_SR_UIF)
 8000774:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00c      	beq.n	800079c <TIM2_IRQHandler+0x2c>
    {
        _tim_msec_++; // increase milliseconds counter
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <TIM2_IRQHandler+0x38>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a07      	ldr	r2, [pc, #28]	@ (80007a8 <TIM2_IRQHandler+0x38>)
 800078a:	6013      	str	r3, [r2, #0]
        TIM2->SR &= ~TIM_SR_UIF; // clear interrupt flag
 800078c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000796:	f023 0301 	bic.w	r3, r3, #1
 800079a:	6113      	str	r3, [r2, #16]
    }
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2000001c 	.word	0x2000001c

080007ac <_tim_msec_val_>:
/*
 * @brief  : Get milliseconds Value at this Moment
 * @retval : milliseconds value
 */
uint32_t _tim_msec_val_(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
    return _tim_msec_;
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <_tim_msec_val_+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	2000001c 	.word	0x2000001c

080007c4 <_tim_usec_val_>:
/*
 * @brief  : Get microseconds Value at this Moment
 * @retval : microseconds value
 */
uint32_t _tim_usec_val_(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    return _tim_msec_val_() * 1000 + TIM2->CNT;
 80007c8:	f7ff fff0 	bl	80007ac <_tim_msec_val_>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007d2:	fb03 f202 	mul.w	r2, r3, r2
 80007d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007dc:	4413      	add	r3, r2
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <tim_TIM2_Delay_ms>:
/*
 * @brief : Timer2 Delay milliseconds
 * @param : milliseconds delay
 */
void tim_TIM2_Delay_ms(uint32_t ms)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b084      	sub	sp, #16
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
    uint32_t start = _tim_msec_val_();
 80007ea:	f7ff ffdf 	bl	80007ac <_tim_msec_val_>
 80007ee:	60f8      	str	r0, [r7, #12]
    while (_tim_msec_val_() - start < ms);
 80007f0:	bf00      	nop
 80007f2:	f7ff ffdb 	bl	80007ac <_tim_msec_val_>
 80007f6:	4602      	mov	r2, r0
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d8f7      	bhi.n	80007f2 <tim_TIM2_Delay_ms+0x10>
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <tim_TIM2_Delay_us>:
/*
 * @brief : Timer2 Delay microseconds
 * @param : microseconds delay
 */
void tim_TIM2_Delay_us(uint32_t us)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    uint32_t start = _tim_usec_val_();
 8000814:	f7ff ffd6 	bl	80007c4 <_tim_usec_val_>
 8000818:	60f8      	str	r0, [r7, #12]
    while (_tim_usec_val_() - start < us);
 800081a:	bf00      	nop
 800081c:	f7ff ffd2 	bl	80007c4 <_tim_usec_val_>
 8000820:	4602      	mov	r2, r0
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	d8f7      	bhi.n	800081c <tim_TIM2_Delay_us+0x10>
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <sensor_Init>:
 * @brief : Sensor Initialization
 * @param :
 *          sens --> pointer to Sensor_s structure
*/
void sensor_Init(Sensor_s *sens)
 {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	// minimum time between updates to velocity
	sens->min_elapsed_time = 0.000100f; // default is 100 microseconds, or 10kHz
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a26      	ldr	r2, [pc, #152]	@ (80008dc <sensor_Init+0xa4>)
 8000844:	601a      	str	r2, [r3, #0]

	// velocity calculation variables
	sens->velocity = 0.0f;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
	sens->angle_prev = 0.0f; // result of last call to getSensorAngle(), used for full rotations and velocity
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
	sens->angle_prev_ts = 0; // timestamp of last call to getAngle, used for velocity
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
	sens->vel_angle_prev = 0.0f; // angle at last call to getVelocity, used for velocity
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f04f 0200 	mov.w	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
	sens->vel_angle_prev_ts = 0; // last velocity calculation timestamp
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
	sens->full_rotations = 0; // full rotation tracking
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
	sens->vel_full_rotations = 0; // previous full rotation value for velocity calculation
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]

	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	sensor_GetSensorAngle(); // call once
 8000876:	f000 f833 	bl	80008e0 <sensor_GetSensorAngle>
	tim_TIM2_Delay_us(1);   // 1 us delay
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ffc6 	bl	800080c <tim_TIM2_Delay_us>
	sens->vel_angle_prev = sensor_GetSensorAngle(); // call again
 8000880:	f000 f82e 	bl	80008e0 <sensor_GetSensorAngle>
 8000884:	eef0 7a40 	vmov.f32	s15, s0
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	edc3 7a04 	vstr	s15, [r3, #16]
	sens->vel_angle_prev_ts = _tim_usec_val_();
 800088e:	f7ff ff99 	bl	80007c4 <_tim_usec_val_>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	615a      	str	r2, [r3, #20]
	tim_TIM2_Delay_ms(1);  // 1 ms delay
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff ffa1 	bl	80007e2 <tim_TIM2_Delay_ms>
	sensor_GetSensorAngle(); // call once
 80008a0:	f000 f81e 	bl	80008e0 <sensor_GetSensorAngle>
	tim_TIM2_Delay_us(1);  // 1 us delay
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff ffb1 	bl	800080c <tim_TIM2_Delay_us>
	sens->angle_prev = sensor_GetSensorAngle(); // call again
 80008aa:	f000 f819 	bl	80008e0 <sensor_GetSensorAngle>
 80008ae:	eef0 7a40 	vmov.f32	s15, s0
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	edc3 7a02 	vstr	s15, [r3, #8]
	sens->angle_prev_ts = _tim_usec_val_();
 80008b8:	f7ff ff84 	bl	80007c4 <_tim_usec_val_>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	60da      	str	r2, [r3, #12]

	sens->sensor_offset = 0.0f;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]

	// look at here
	sens->sensor_direction = 1;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2201      	movs	r2, #1
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	38d1b717 	.word	0x38d1b717

080008e0 <sensor_GetSensorAngle>:
/*
 * @brief  : Sensor Read Mechanical Shaft Angle
 * @retval : mech angle
*/
float sensor_GetSensorAngle()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	// look at here
	uint16_t raw_angle = as5600_ReadRawAngle();
 80008e6:	f7ff fc9b 	bl	8000220 <as5600_ReadRawAngle>
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
	return (float) (raw_angle * _2PI / _powtwo(12));
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	ee07 3a90 	vmov	s15, r3
 80008f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000918 <sensor_GetSensorAngle+0x38>
 80008fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000900:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800091c <sensor_GetSensorAngle+0x3c>
 8000904:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000908:	eef0 7a66 	vmov.f32	s15, s13
//	return (float) (raw_angle * AS5600_PRECISE * _PI / 180.0);
}
 800090c:	eeb0 0a67 	vmov.f32	s0, s15
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40c90fdb 	.word	0x40c90fdb
 800091c:	45800000 	.word	0x45800000

08000920 <sensor_Update>:
 * @brief : Sensor Update
 * @param :
 *          sens --> pointer to Sensor_s structure
*/
void sensor_Update(Sensor_s *sens)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    float val = sensor_GetSensorAngle();
 8000928:	f7ff ffda 	bl	80008e0 <sensor_GetSensorAngle>
 800092c:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 8000930:	edd7 7a03 	vldr	s15, [r7, #12]
 8000934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093c:	d42d      	bmi.n	800099a <sensor_Update+0x7a>
        return; // TODO signal error, e.g. via a flag and counter
    sens->angle_prev_ts = _tim_usec_val_();
 800093e:	f7ff ff41 	bl	80007c4 <_tim_usec_val_>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60da      	str	r2, [r3, #12]
    float d_angle = val - sens->angle_prev;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000950:	ed97 7a03 	vldr	s14, [r7, #12]
 8000954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000958:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    if(fabs(d_angle) > (0.8f*_2PI) ) sens->full_rotations += ( d_angle > 0 ) ? -1 : 1;
 800095c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000960:	eef0 7ae7 	vabs.f32	s15, s15
 8000964:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80009a4 <sensor_Update+0x84>
 8000968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800096c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000970:	dd0f      	ble.n	8000992 <sensor_Update+0x72>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	edd7 7a02 	vldr	s15, [r7, #8]
 800097a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000982:	dd02      	ble.n	800098a <sensor_Update+0x6a>
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	e000      	b.n	800098c <sensor_Update+0x6c>
 800098a:	2201      	movs	r2, #1
 800098c:	441a      	add	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	619a      	str	r2, [r3, #24]
    sens->angle_prev = val;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	e000      	b.n	800099c <sensor_Update+0x7c>
        return; // TODO signal error, e.g. via a flag and counter
 800099a:	bf00      	nop
}
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40a0d97c 	.word	0x40a0d97c

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009ac:	f7ff fc26 	bl	80001fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f000 f811 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009da:	f7ff fbf5 	bl	80001c8 <main>
  bx  lr    
 80009de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009ec:	08000a64 	.word	0x08000a64
  ldr r2, =_sbss
 80009f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009f4:	20000020 	.word	0x20000020

080009f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000a34 <__libc_init_array+0x38>)
 8000a00:	4c0d      	ldr	r4, [pc, #52]	@ (8000a38 <__libc_init_array+0x3c>)
 8000a02:	1b64      	subs	r4, r4, r5
 8000a04:	10a4      	asrs	r4, r4, #2
 8000a06:	2600      	movs	r6, #0
 8000a08:	42a6      	cmp	r6, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a3c <__libc_init_array+0x40>)
 8000a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a40 <__libc_init_array+0x44>)
 8000a10:	f000 f818 	bl	8000a44 <_init>
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	2600      	movs	r6, #0
 8000a1a:	42a6      	cmp	r6, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a24:	4798      	blx	r3
 8000a26:	3601      	adds	r6, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2e:	4798      	blx	r3
 8000a30:	3601      	adds	r6, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	08000a5c 	.word	0x08000a5c
 8000a38:	08000a5c 	.word	0x08000a5c
 8000a3c:	08000a5c 	.word	0x08000a5c
 8000a40:	08000a60 	.word	0x08000a60

08000a44 <_init>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	bf00      	nop
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr

08000a50 <_fini>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr
