
SingleMotorOpenLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  0800049c  0000149c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  0000149c  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  0000149c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  0800049c  0000149c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00001494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000498  08000498  00001498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000149c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000149c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011b5  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000037e  00000000  00000000  00002681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00002a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000072  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ff5  00000000  00000000  00002b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001511  00000000  00000000  0001bb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c496  00000000  00000000  0001d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a94be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000168  00000000  00000000  000a9504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000a966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800047c 	.word	0x0800047c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800047c 	.word	0x0800047c

080001c8 <main>:
 */

#include "main.h"

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	// system clock configuration
	rcc_SysClock_Config();
 80001cc:	f000 f874 	bl	80002b8 <rcc_SysClock_Config>

	// systick timer configuration
	rcc_SysTick_Config();
 80001d0:	f000 f8da 	bl	8000388 <rcc_SysTick_Config>

	// test systick timer
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001d4:	4b09      	ldr	r3, [pc, #36]	@ (80001fc <main+0x34>)
 80001d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d8:	4a08      	ldr	r2, [pc, #32]	@ (80001fc <main+0x34>)
 80001da:	f043 0308 	orr.w	r3, r3, #8
 80001de:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD->MODER |= GPIO_MODER_MODE15_0;
 80001e0:	4b07      	ldr	r3, [pc, #28]	@ (8000200 <main+0x38>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <main+0x38>)
 80001e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80001ea:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~GPIO_MODER_MODE15_1;
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <main+0x38>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a03      	ldr	r2, [pc, #12]	@ (8000200 <main+0x38>)
 80001f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80001f6:	6013      	str	r3, [r2, #0]

	while(1) {;}
 80001f8:	bf00      	nop
 80001fa:	e7fd      	b.n	80001f8 <main+0x30>
 80001fc:	40023800 	.word	0x40023800
 8000200:	40020c00 	.word	0x40020c00

08000204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <SystemInit+0x20>)
 800020a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800020e:	4a05      	ldr	r2, [pc, #20]	@ (8000224 <SystemInit+0x20>)
 8000210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	2b00      	cmp	r3, #0
 8000238:	db0c      	blt.n	8000254 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	f003 021f 	and.w	r2, r3, #31
 8000240:	4907      	ldr	r1, [pc, #28]	@ (8000260 <__NVIC_ClearPendingIRQ+0x38>)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	095b      	lsrs	r3, r3, #5
 8000248:	2001      	movs	r0, #1
 800024a:	fa00 f202 	lsl.w	r2, r0, r2
 800024e:	3360      	adds	r3, #96	@ 0x60
 8000250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100

08000264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000274:	2b00      	cmp	r3, #0
 8000276:	db0a      	blt.n	800028e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	b2da      	uxtb	r2, r3
 800027c:	490c      	ldr	r1, [pc, #48]	@ (80002b0 <__NVIC_SetPriority+0x4c>)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	0112      	lsls	r2, r2, #4
 8000284:	b2d2      	uxtb	r2, r2
 8000286:	440b      	add	r3, r1
 8000288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800028c:	e00a      	b.n	80002a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4908      	ldr	r1, [pc, #32]	@ (80002b4 <__NVIC_SetPriority+0x50>)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f003 030f 	and.w	r3, r3, #15
 800029a:	3b04      	subs	r3, #4
 800029c:	0112      	lsls	r2, r2, #4
 800029e:	b2d2      	uxtb	r2, r2
 80002a0:	440b      	add	r3, r1
 80002a2:	761a      	strb	r2, [r3, #24]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <rcc_SysClock_Config>:
 * 		    HCLK   168 MHz
 * 		    APB1    42 MHz
 *		    APB2    84 MHz
 */
void rcc_SysClock_Config(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	// enable HSE
	RCC->CR |= RCC_CR_HSEON;               // HSE on
 80002bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002c6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)) {;} // wait for it
 80002c8:	bf00      	nop
 80002ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f9      	beq.n	80002ca <rcc_SysClock_Config+0x12>

	// select HSE as PLL source
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC_HSE);
 80002d6:	4b28      	ldr	r3, [pc, #160]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a27      	ldr	r2, [pc, #156]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002e0:	6053      	str	r3, [r2, #4]

	// PLL prescalers
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLM); // clear previous
 80002e2:	4b25      	ldr	r3, [pc, #148]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002e4:	685a      	ldr	r2, [r3, #4]
 80002e6:	4924      	ldr	r1, [pc, #144]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002e8:	4b24      	ldr	r3, [pc, #144]	@ (800037c <rcc_SysClock_Config+0xc4>)
 80002ea:	4013      	ands	r3, r2
 80002ec:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |=  (0 << RCC_PLLCFGR_PLLP_Pos)                               // PLLP =   2
 80002ee:	4b22      	ldr	r3, [pc, #136]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	4921      	ldr	r1, [pc, #132]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002f4:	4b22      	ldr	r3, [pc, #136]	@ (8000380 <rcc_SysClock_Config+0xc8>)
 80002f6:	4313      	orrs	r3, r2
 80002f8:	604b      	str	r3, [r1, #4]
	             |   (336 << RCC_PLLCFGR_PLLN_Pos)                             // PLLN = 336
			     |   (8 << RCC_PLLCFGR_PLLM_Pos)                               // PLLM =   8
			     |   (7 << RCC_PLLCFGR_PLLQ_Pos);                              // PLLQ =   7

	// enable main PLL
	RCC->CR |= RCC_CR_PLLON;               // main PLL on
 80002fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 8000300:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000304:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)) {;} // wait for it
 8000306:	bf00      	nop
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <rcc_SysClock_Config+0x50>

	// APB1, APB2, AHB prescalers
	RCC->CFGR &= ~(RCC_CFGR_PPRE2 | RCC_CFGR_PPRE1); // clear previous
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a17      	ldr	r2, [pc, #92]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 800031a:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800031e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (0b100 << RCC_CFGR_PPRE2_Pos)      // APB2 prescalers = 2
 8000320:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a14      	ldr	r2, [pc, #80]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 8000326:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 800032a:	6093      	str	r3, [r2, #8]
	          |   (0b101 << RCC_CFGR_PPRE1_Pos);     // APB1 prescalers = 4
	RCC->CFGR &= ~ RCC_CFGR_HPRE;                    // AHB not divided
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4a11      	ldr	r2, [pc, #68]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 8000332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000336:	6093      	str	r3, [r2, #8]

	// proper flash latency for SYSCLK = 168 MHz
	FLASH->ACR &= ~ FLASH_ACR_LATENCY;     // clear previous
 8000338:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <rcc_SysClock_Config+0xcc>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a11      	ldr	r2, [pc, #68]	@ (8000384 <rcc_SysClock_Config+0xcc>)
 800033e:	f023 0307 	bic.w	r3, r3, #7
 8000342:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=   FLASH_ACR_LATENCY_5WS; // 5 wait states for 168 MHz
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <rcc_SysClock_Config+0xcc>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a0e      	ldr	r2, [pc, #56]	@ (8000384 <rcc_SysClock_Config+0xcc>)
 800034a:	f043 0305 	orr.w	r3, r3, #5
 800034e:	6013      	str	r3, [r2, #0]

	// PLL selected as system clock
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & RCC_CFGR_SWS)) {;}  // wait for it
 800035c:	bf00      	nop
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <rcc_SysClock_Config+0xc0>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	f003 030c 	and.w	r3, r3, #12
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <rcc_SysClock_Config+0xa6>
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800
 800037c:	fffc8000 	.word	0xfffc8000
 8000380:	07005408 	.word	0x07005408
 8000384:	40023c00 	.word	0x40023c00

08000388 <rcc_SysTick_Config>:
/*
 * @brief : SysTick Timer Configuration
 * @Note  : adjusted in 1ms regarding 168 MHz system clock
 */
void rcc_SysTick_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	// clear control register to disable SysTick at beginning
	SysTick->CTRL = 0;
 800038c:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <rcc_SysTick_Config+0x30>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]

	// set reload value regarding SYSCLK value (168 MHz)
	SysTick->LOAD = 168000 - 1;
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <rcc_SysTick_Config+0x30>)
 8000394:	4a09      	ldr	r2, [pc, #36]	@ (80003bc <rcc_SysTick_Config+0x34>)
 8000396:	605a      	str	r2, [r3, #4]

	// priority SysTick interrupt
	NVIC_SetPriority(SysTick_IRQn, 0);
 8000398:	2100      	movs	r1, #0
 800039a:	f04f 30ff 	mov.w	r0, #4294967295
 800039e:	f7ff ff61 	bl	8000264 <__NVIC_SetPriority>

	// reset SysTick value to zero
	SysTick->VAL = 0;
 80003a2:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <rcc_SysTick_Config+0x30>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]

	// enable SysTick from CTRL
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk    // enable SysTick counter
 80003a8:	4b03      	ldr	r3, [pc, #12]	@ (80003b8 <rcc_SysTick_Config+0x30>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a02      	ldr	r2, [pc, #8]	@ (80003b8 <rcc_SysTick_Config+0x30>)
 80003ae:	f043 0307 	orr.w	r3, r3, #7
 80003b2:	6013      	str	r3, [r2, #0]
	              |  SysTick_CTRL_CLKSOURCE_Msk // CPU clock as SysTick source
			      |  SysTick_CTRL_TICKINT_Msk;  // enable interrupt
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	e000e010 	.word	0xe000e010
 80003bc:	0002903f 	.word	0x0002903f

080003c0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_ODR_OD15;
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <SysTick_Handler+0x1c>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <SysTick_Handler+0x1c>)
 80003ca:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 80003ce:	6153      	str	r3, [r2, #20]
	// clear pending
	NVIC_ClearPendingIRQ(SysTick_IRQn);
 80003d0:	f04f 30ff 	mov.w	r0, #4294967295
 80003d4:	f7ff ff28 	bl	8000228 <__NVIC_ClearPendingIRQ>
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40020c00 	.word	0x40020c00

080003e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000418 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003e4:	f7ff ff0e 	bl	8000204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e8:	480c      	ldr	r0, [pc, #48]	@ (800041c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ea:	490d      	ldr	r1, [pc, #52]	@ (8000420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000400:	4c0a      	ldr	r4, [pc, #40]	@ (800042c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040e:	f000 f811 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000412:	f7ff fed9 	bl	80001c8 <main>
  bx  lr    
 8000416:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000424:	0800049c 	.word	0x0800049c
  ldr r2, =_sbss
 8000428:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800042c:	2000001c 	.word	0x2000001c

08000430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC_IRQHandler>
	...

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	4d0d      	ldr	r5, [pc, #52]	@ (800046c <__libc_init_array+0x38>)
 8000438:	4c0d      	ldr	r4, [pc, #52]	@ (8000470 <__libc_init_array+0x3c>)
 800043a:	1b64      	subs	r4, r4, r5
 800043c:	10a4      	asrs	r4, r4, #2
 800043e:	2600      	movs	r6, #0
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	4d0b      	ldr	r5, [pc, #44]	@ (8000474 <__libc_init_array+0x40>)
 8000446:	4c0c      	ldr	r4, [pc, #48]	@ (8000478 <__libc_init_array+0x44>)
 8000448:	f000 f818 	bl	800047c <_init>
 800044c:	1b64      	subs	r4, r4, r5
 800044e:	10a4      	asrs	r4, r4, #2
 8000450:	2600      	movs	r6, #0
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
