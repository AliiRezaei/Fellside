
SingleMotorOpenLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d98  08001d98  00002d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001da8  08001da8  00003084  2**0
                  CONTENTS
  4 .ARM          00000000  08001da8  08001da8  00003084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001da8  08001da8  00003084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da8  08001da8  00002da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001dac  08001dac  00002dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08001db0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003084  2**0
                  CONTENTS
 10 .bss          00000020  20000084  20000084  00003084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  00003084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002a02  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aa7  00000000  00000000  00005ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00006560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017e  00000000  00000000  00006778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001987d  00000000  00000000  000068f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003a2c  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d39c  00000000  00000000  00023b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b0f3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000974  00000000  00000000  000b0f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000b18f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d80 	.word	0x08001d80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08001d80 	.word	0x08001d80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <_sin>:
#define _constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))
#define _sqrt(a) (_sqrtApprox(a))
#define _isset(a) ( (a) != (NOT_SET) )
#define _powtwo(x) (1 << (x))

__attribute__((weak)) float _sin(float a){
 8000b14:	b480      	push	{r7}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  int32_t t1, t2;
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8000b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b22:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000bf8 <_sin+0xe4>
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2e:	ee17 3a90 	vmov	r3, s15
 8000b32:	60fb      	str	r3, [r7, #12]
  int frac = i & 0xff;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b46:	d80b      	bhi.n	8000b60 <_sin+0x4c>
    t1 = (int32_t)sine_array[i]; t2 = (int32_t)sine_array[i+1];
 8000b48:	4a2c      	ldr	r2, [pc, #176]	@ (8000bfc <_sin+0xe8>)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a29      	ldr	r2, [pc, #164]	@ (8000bfc <_sin+0xe8>)
 8000b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	e033      	b.n	8000bc8 <_sin+0xb4>
  }
  else if(i < 128) {
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b64:	d80e      	bhi.n	8000b84 <_sin+0x70>
    t1 = (int32_t)sine_array[128 - i]; t2 = (int32_t)sine_array[127 - i];
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000b6c:	4a23      	ldr	r2, [pc, #140]	@ (8000bfc <_sin+0xe8>)
 8000b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000b7a:	4a20      	ldr	r2, [pc, #128]	@ (8000bfc <_sin+0xe8>)
 8000b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	e021      	b.n	8000bc8 <_sin+0xb4>
  }
  else if(i < 192) {
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2bbf      	cmp	r3, #191	@ 0xbf
 8000b88:	d80e      	bhi.n	8000ba8 <_sin+0x94>
    t1 = -(int32_t)sine_array[-128 + i]; t2 = -(int32_t)sine_array[-127 + i];
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3b80      	subs	r3, #128	@ 0x80
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <_sin+0xe8>)
 8000b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b94:	425b      	negs	r3, r3
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3b7f      	subs	r3, #127	@ 0x7f
 8000b9c:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <_sin+0xe8>)
 8000b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	e00f      	b.n	8000bc8 <_sin+0xb4>
  }
  else {
    t1 = -(int32_t)sine_array[256 - i]; t2 = -(int32_t)sine_array[255 - i];
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000bae:	4a13      	ldr	r2, [pc, #76]	@ (8000bfc <_sin+0xe8>)
 8000bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb4:	425b      	negs	r3, r3
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <_sin+0xe8>)
 8000bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc4:	425b      	negs	r3, r3
 8000bc6:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	fb02 f303 	mul.w	r3, r2, r3
 8000bd4:	121a      	asrs	r2, r3, #8
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4413      	add	r3, r2
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000be2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000c00 <_sin+0xec>
 8000be6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000bea:	eeb0 0a67 	vmov.f32	s0, s15
 8000bee:	371c      	adds	r7, #28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	4622f983 	.word	0x4622f983
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	38000000 	.word	0x38000000

08000c04 <_cos>:

__attribute__((weak)) float _cos(float a){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8000c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c12:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000c5c <_cos+0x58>
 8000c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c1a:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8000c1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c22:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000c60 <_cos+0x5c>
 8000c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2e:	dd06      	ble.n	8000c3e <_cos+0x3a>
 8000c30:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c34:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000c60 <_cos+0x5c>
 8000c38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c3c:	e001      	b.n	8000c42 <_cos+0x3e>
 8000c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c42:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 8000c46:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c4a:	f7ff ff63 	bl	8000b14 <_sin>
 8000c4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000c52:	eeb0 0a67 	vmov.f32	s0, s15
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	3fc90fdb 	.word	0x3fc90fdb
 8000c60:	40c90fdb 	.word	0x40c90fdb

08000c64 <_sincos>:

__attribute__((weak)) void _sincos(float a, float* s, float* c){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000c6e:	60b8      	str	r0, [r7, #8]
 8000c70:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 8000c72:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c76:	f7ff ff4d 	bl	8000b14 <_sin>
 8000c7a:	eef0 7a40 	vmov.f32	s15, s0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 8000c84:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c88:	f7ff ffbc 	bl	8000c04 <_cos>
 8000c8c:	eef0 7a40 	vmov.f32	s15, s0
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	edc3 7a00 	vstr	s15, [r3]
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <main>:
 */

#include "main.h"

int main(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b0ad      	sub	sp, #180	@ 0xb4
 8000ca4:	af00      	add	r7, sp, #0
	// system clock configuration
	rcc_SysClock_Config();
 8000ca6:	f000 f8c5 	bl	8000e34 <rcc_SysClock_Config>

	// systick timer configuration
	rcc_SysTick_Config();
 8000caa:	f000 f92b 	bl	8000f04 <rcc_SysTick_Config>

	// timer 3 PWM configuration
	tim_TIM3_3PWM_Config();
 8000cae:	f000 f96b 	bl	8000f88 <tim_TIM3_3PWM_Config>

	// timer 2 Delay configuration
	tim_TIM2_Delay_Config();
 8000cb2:	f000 fa0d 	bl	80010d0 <tim_TIM2_Delay_Config>
	// BLDC motor and driver instance
	BLDCMotor_s motor;
	BLDCDriver_s driver;

	// init driver
	BLDCDriver_Init(&driver);
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fa6a 	bl	8001194 <BLDCDriver_Init>

	// link motor and driver
	BLDCMotor_LinkDriver(&motor, &driver);
 8000cc0:	f107 0210 	add.w	r2, r7, #16
 8000cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fc3c 	bl	8001548 <BLDCMotor_LinkDriver>

	// init motor
	int pole_pairs = 14;        // number of pole pairs
 8000cd0:	230e      	movs	r3, #14
 8000cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	float resistance = NOT_SET; // phase resistance
 8000cd6:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <main+0xd8>)
 8000cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	float kv = NOT_SET;         // back emf constant
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <main+0xd8>)
 8000cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	float inductance = NOT_SET; // phase inductance
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <main+0xd8>)
 8000ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	BLDCMotor_Init(&motor, pole_pairs, resistance, inductance, kv);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cec:	ed97 1a27 	vldr	s2, [r7, #156]	@ 0x9c
 8000cf0:	edd7 0a26 	vldr	s1, [r7, #152]	@ 0x98
 8000cf4:	ed97 0a28 	vldr	s0, [r7, #160]	@ 0xa0
 8000cf8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fb77 	bl	80013f0 <BLDCMotor_Init>

	// target to go
	float target = 0.0;
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	float target_arr[] = {1.0, 2.0, 3.0, 4.0};
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <main+0xdc>)
 8000d0c:	463c      	mov	r4, r7
 8000d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int i = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	uint32_t start = _tim_msec_val_();
 8000d1a:	f000 fa1f 	bl	800115c <_tim_msec_val_>
 8000d1e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	while(1)
	{
		target = target_arr[i++];
 8000d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	33b0      	adds	r3, #176	@ 0xb0
 8000d30:	443b      	add	r3, r7
 8000d32:	3bb0      	subs	r3, #176	@ 0xb0
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		while (_tim_msec_val_() - start < 1500)
 8000d3a:	e006      	b.n	8000d4a <main+0xaa>
		{
			// run open loop
			BLDCMotor_Move(&motor, target);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d40:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fd93 	bl	8001870 <BLDCMotor_Move>
		while (_tim_msec_val_() - start < 1500)
 8000d4a:	f000 fa07 	bl	800115c <_tim_msec_val_>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d9ee      	bls.n	8000d3c <main+0x9c>
		}
		if (i > 3)
 8000d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	dd02      	ble.n	8000d6c <main+0xcc>
			i = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		start = _tim_msec_val_();
 8000d6c:	f000 f9f6 	bl	800115c <_tim_msec_val_>
 8000d70:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
		target = target_arr[i++];
 8000d74:	e7d5      	b.n	8000d22 <main+0x82>
 8000d76:	bf00      	nop
 8000d78:	c640e400 	.word	0xc640e400
 8000d7c:	08001d98 	.word	0x08001d98

08000d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0c      	blt.n	8000dd0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	@ (8000ddc <__NVIC_ClearPendingIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	3360      	adds	r3, #96	@ 0x60
 8000dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	@ (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <rcc_SysClock_Config>:
 * 		    HCLK   168 MHz
 * 		    APB1    42 MHz
 *		    APB2    84 MHz
 */
void rcc_SysClock_Config(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	// enable HSE
	RCC->CR |= RCC_CR_HSEON;               // HSE on
 8000e38:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)) {;} // wait for it
 8000e44:	bf00      	nop
 8000e46:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f9      	beq.n	8000e46 <rcc_SysClock_Config+0x12>

	// select HSE as PLL source
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC_HSE);
 8000e52:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	4a27      	ldr	r2, [pc, #156]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e5c:	6053      	str	r3, [r2, #4]

	// PLL prescalers
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLM); // clear previous
 8000e5e:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	4924      	ldr	r1, [pc, #144]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <rcc_SysClock_Config+0xc4>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |=  (0 << RCC_PLLCFGR_PLLP_Pos)                               // PLLP =   2
 8000e6a:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	4921      	ldr	r1, [pc, #132]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <rcc_SysClock_Config+0xc8>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	604b      	str	r3, [r1, #4]
	             |   (336 << RCC_PLLCFGR_PLLN_Pos)                             // PLLN = 336
			     |   (8 << RCC_PLLCFGR_PLLM_Pos)                               // PLLM =   8
			     |   (7 << RCC_PLLCFGR_PLLQ_Pos);                              // PLLQ =   7

	// enable main PLL
	RCC->CR |= RCC_CR_PLLON;               // main PLL on
 8000e76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e80:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)) {;} // wait for it
 8000e82:	bf00      	nop
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f9      	beq.n	8000e84 <rcc_SysClock_Config+0x50>

	// APB1, APB2, AHB prescalers
	RCC->CFGR &= ~(RCC_CFGR_PPRE2 | RCC_CFGR_PPRE1); // clear previous
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e96:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000e9a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (0b100 << RCC_CFGR_PPRE2_Pos)      // APB2 prescalers = 2
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000ea2:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 8000ea6:	6093      	str	r3, [r2, #8]
	          |   (0b101 << RCC_CFGR_PPRE1_Pos);     // APB1 prescalers = 4
	RCC->CFGR &= ~ RCC_CFGR_HPRE;                    // AHB not divided
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000eb2:	6093      	str	r3, [r2, #8]

	// proper flash latency for SYSCLK = 168 MHz
	FLASH->ACR &= ~ FLASH_ACR_LATENCY;     // clear previous
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <rcc_SysClock_Config+0xcc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a11      	ldr	r2, [pc, #68]	@ (8000f00 <rcc_SysClock_Config+0xcc>)
 8000eba:	f023 0307 	bic.w	r3, r3, #7
 8000ebe:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=   FLASH_ACR_LATENCY_5WS; // 5 wait states for 168 MHz
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <rcc_SysClock_Config+0xcc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <rcc_SysClock_Config+0xcc>)
 8000ec6:	f043 0305 	orr.w	r3, r3, #5
 8000eca:	6013      	str	r3, [r2, #0]

	// PLL selected as system clock
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & RCC_CFGR_SWS)) {;}  // wait for it
 8000ed8:	bf00      	nop
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <rcc_SysClock_Config+0xc0>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f9      	beq.n	8000eda <rcc_SysClock_Config+0xa6>
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	fffc8000 	.word	0xfffc8000
 8000efc:	07005408 	.word	0x07005408
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <rcc_SysTick_Config>:
/*
 * @brief : SysTick Timer Configuration
 * @note  : adjusted in 1ms regarding 168 MHz system clock
 */
void rcc_SysTick_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	// clear control register to disable SysTick at beginning
	SysTick->CTRL = 0;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <rcc_SysTick_Config+0x30>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]

	// set reload value regarding SYSCLK value (168 MHz)
	SysTick->LOAD = 168000 - 1;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <rcc_SysTick_Config+0x30>)
 8000f10:	4a09      	ldr	r2, [pc, #36]	@ (8000f38 <rcc_SysTick_Config+0x34>)
 8000f12:	605a      	str	r2, [r3, #4]

	// priority SysTick interrupt
	NVIC_SetPriority(SysTick_IRQn, 0);
 8000f14:	2100      	movs	r1, #0
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	f7ff ff61 	bl	8000de0 <__NVIC_SetPriority>

	// reset SysTick value to zero
	SysTick->VAL = 0;
 8000f1e:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <rcc_SysTick_Config+0x30>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]

	// enable SysTick from CTRL
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk    // enable SysTick counter
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <rcc_SysTick_Config+0x30>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a02      	ldr	r2, [pc, #8]	@ (8000f34 <rcc_SysTick_Config+0x30>)
 8000f2a:	f043 0307 	orr.w	r3, r3, #7
 8000f2e:	6013      	str	r3, [r2, #0]
	              |  SysTick_CTRL_CLKSOURCE_Msk // CPU clock as SysTick source
			      |  SysTick_CTRL_TICKINT_Msk;  // enable interrupt
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	e000e010 	.word	0xe000e010
 8000f38:	0002903f 	.word	0x0002903f

08000f3c <SysTick_Handler>:

/*
 * @brief : SysTick Timer Interrupt Request Handler
 */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	// clear pending
	NVIC_ClearPendingIRQ(SysTick_IRQn);
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff2e 	bl	8000da4 <__NVIC_ClearPendingIRQ>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <__NVIC_EnableIRQ>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	@ (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <tim_TIM3_3PWM_Config>:
 *          Center aligned mode 3
 *          Frequency 25 KHz
 *          PWM mode 1
 */
void tim_TIM3_3PWM_Config(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	// enable clocks for GPIOA and GPIOB
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80010c0 <tim_TIM3_3PWM_Config+0x138>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	4a4b      	ldr	r2, [pc, #300]	@ (80010c0 <tim_TIM3_3PWM_Config+0x138>)
 8000f92:	f043 0303 	orr.w	r3, r3, #3
 8000f96:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA6, PA7 to alternate function (TIM3_CH1, TIM3_CH2) AF2
	GPIOA->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 8000f98:	4b4a      	ldr	r3, [pc, #296]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a49      	ldr	r2, [pc, #292]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000f9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000fa2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1); // Alternate Function
 8000fa4:	4b47      	ldr	r3, [pc, #284]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a46      	ldr	r2, [pc, #280]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000faa:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000fae:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000fb0:	4b44      	ldr	r3, [pc, #272]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a43      	ldr	r2, [pc, #268]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000fb6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000fba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  ((0x2 << (6 * 4)) | (0x2 << (7 * 4))); // AF2 for TIM3
 8000fbc:	4b41      	ldr	r3, [pc, #260]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a40      	ldr	r2, [pc, #256]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000fc2:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000fc6:	6213      	str	r3, [r2, #32]

	// set PB0 to alternate function (TIM3_CH3) AF2
	GPIOB->MODER &= ~(GPIO_MODER_MODER0);
 8000fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a3e      	ldr	r2, [pc, #248]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8000fce:	f023 0303 	bic.w	r3, r3, #3
 8000fd2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (GPIO_MODER_MODER0_1); // Alternate Function
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0xF << (0 * 4));
 8000fe0:	4b39      	ldr	r3, [pc, #228]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4a38      	ldr	r2, [pc, #224]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8000fe6:	f023 030f 	bic.w	r3, r3, #15
 8000fea:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  (0x2 << (0 * 4)); // AF2 for TIM3
 8000fec:	4b36      	ldr	r3, [pc, #216]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a35      	ldr	r2, [pc, #212]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	6213      	str	r3, [r2, #32]

	// set speed, push-pull
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR7;
 8000ff8:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <tim_TIM3_3PWM_Config+0x13c>)
 8000ffe:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8001002:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0;
 8001004:	4b30      	ldr	r3, [pc, #192]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4a2f      	ldr	r2, [pc, #188]	@ (80010c8 <tim_TIM3_3PWM_Config+0x140>)
 800100a:	f043 0303 	orr.w	r3, r3, #3
 800100e:	6093      	str	r3, [r2, #8]

	// enable TIM3 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <tim_TIM3_3PWM_Config+0x138>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a2a      	ldr	r2, [pc, #168]	@ (80010c0 <tim_TIM3_3PWM_Config+0x138>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40

	// center aligned mode 3
	TIM3->CR1 &= ~TIM_CR1_CMS;
 800101c:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a2a      	ldr	r2, [pc, #168]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001022:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001026:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |=  TIM_CR1_CMS_1 | TIM_CR1_CMS_0; // CMS = 11
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a27      	ldr	r2, [pc, #156]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 800102e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001032:	6013      	str	r3, [r2, #0]

	// set auto reload value and prescaler
	TIM3->ARR = 1680 - 1; // because of APB1 clock is 168 MHz and center aligned mode 3
 8001034:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001036:	f240 628f 	movw	r2, #1679	@ 0x68f
 800103a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 0;
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28

	// configure CH1, CH2 in CCMR1 (PWM mode 1, preload enable)
	TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800104c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001050:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=  (6 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;
 8001052:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a1d      	ldr	r2, [pc, #116]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001058:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800105c:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=  (6 << TIM_CCMR1_OC2M_Pos) | TIM_CCMR1_OC2PE;
 800105e:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001064:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8001068:	6193      	str	r3, [r2, #24]

	// configure CH3 in CCMR2
	TIM3->CCMR2 &= ~TIM_CCMR2_OC3M;
 800106a:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001074:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= (6 << TIM_CCMR2_OC3M_Pos) | TIM_CCMR2_OC3PE;
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 800107c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001080:	61d3      	str	r3, [r2, #28]

	// enable outputs
	TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a11      	ldr	r2, [pc, #68]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001088:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6213      	str	r3, [r2, #32]

	// enable auto reload preload
	TIM3->CR1 |= TIM_CR1_ARPE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800109c:	6013      	str	r3, [r2, #0]

	// force update to load registers
	TIM3->EGR |= TIM_EGR_UG;
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6153      	str	r3, [r2, #20]

	// start timer
	TIM3->CR1 |= TIM_CR1_CEN;
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a07      	ldr	r2, [pc, #28]	@ (80010cc <tim_TIM3_3PWM_Config+0x144>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6013      	str	r3, [r2, #0]
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40000400 	.word	0x40000400

080010d0 <tim_TIM2_Delay_Config>:
 * @note  :
 *          milliseconds and microseconds are available
 *          so, timer counting-up and overflow each 1ms
 */
void tim_TIM2_Delay_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // enable TIM2 clock
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <tim_TIM2_Delay_Config+0x4c>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	4a10      	ldr	r2, [pc, #64]	@ (800111c <tim_TIM2_Delay_Config+0x4c>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6413      	str	r3, [r2, #64]	@ 0x40

    // set auto reload and prescaler values
    TIM2->ARR = 1000 - 1; // because of APB1 clock is 42 MHz
 80010e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->PSC = 84 - 1;
 80010ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ee:	2253      	movs	r2, #83	@ 0x53
 80010f0:	629a      	str	r2, [r3, #40]	@ 0x28

    TIM2->DIER |= TIM_DIER_UIE; // enable update interrupt
 80010f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 8001102:	201c      	movs	r0, #28
 8001104:	f7ff ff22 	bl	8000f4c <__NVIC_EnableIRQ>

    TIM2->CR1 |= TIM_CR1_CEN;   // start timer
 8001108:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800

08001120 <TIM2_IRQHandler>:

/*
 * @brief : Timer 2 Interrupt Request Handler
 */
void TIM2_IRQHandler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
    if(TIM2->SR & TIM_SR_UIF)
 8001124:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00c      	beq.n	800114c <TIM2_IRQHandler+0x2c>
    {
        _tim_msec_++; // increase milliseconds counter
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <TIM2_IRQHandler+0x38>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <TIM2_IRQHandler+0x38>)
 800113a:	6013      	str	r3, [r2, #0]
        TIM2->SR &= ~TIM_SR_UIF; // clear interrupt flag
 800113c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001146:	f023 0301 	bic.w	r3, r3, #1
 800114a:	6113      	str	r3, [r2, #16]
    }
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200000a0 	.word	0x200000a0

0800115c <_tim_msec_val_>:
/*
 * @brief  : Get milliseconds Value at this Moment
 * @retval : milliseconds value
 */
uint32_t _tim_msec_val_(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
    return _tim_msec_;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <_tim_msec_val_+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200000a0 	.word	0x200000a0

08001174 <_tim_usec_val_>:
/*
 * @brief  : Get microseconds Value at this Moment
 * @retval : microseconds value
 */
uint32_t _tim_usec_val_(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    return _tim_msec_val_() * 1000 + TIM2->CNT;
 8001178:	f7ff fff0 	bl	800115c <_tim_msec_val_>
 800117c:	4603      	mov	r3, r0
 800117e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001182:	fb03 f202 	mul.w	r2, r3, r2
 8001186:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800118a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118c:	4413      	add	r3, r2
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <BLDCDriver_Init>:
 * @brief : BLDC Driver Initialization
 * @param :
 *         BLDCDriver --> pointer to BLDCDriver_s structure
 */
void BLDCDriver_Init(BLDCDriver_s *BLDCDriver)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	// default power-supply value
	BLDCDriver->voltage_power_supply = DEF_POWER_SUPPLY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <BLDCDriver_Init+0x20>)
 80011a0:	601a      	str	r2, [r3, #0]
	BLDCDriver->voltage_limit        = DEF_DRV_VOLT_LIM;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a03      	ldr	r2, [pc, #12]	@ (80011b4 <BLDCDriver_Init+0x20>)
 80011a6:	605a      	str	r2, [r3, #4]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	41c00000 	.word	0x41c00000

080011b8 <BLDCDriver_SetPWM>:
 *         Ua         --> phase A voltage
 *         Ub         --> phase B voltage
 *         Uc         --> phase C voltage
 */
void BLDCDriver_SetPWM(BLDCDriver_s *BLDCDriver, float Ua, float Ub, float Uc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80011c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80011c8:	ed87 1a00 	vstr	s2, [r7]
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, BLDCDriver->voltage_limit);
 80011cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d502      	bpl.n	80011e0 <BLDCDriver_SetPWM+0x28>
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	e00d      	b.n	80011fc <BLDCDriver_SetPWM+0x44>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	dd02      	ble.n	80011fa <BLDCDriver_SetPWM+0x42>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	e000      	b.n	80011fc <BLDCDriver_SetPWM+0x44>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	60bb      	str	r3, [r7, #8]
	Ub = _constrain(Ub, 0.0f, BLDCDriver->voltage_limit);
 80011fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	d502      	bpl.n	8001212 <BLDCDriver_SetPWM+0x5a>
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e00d      	b.n	800122e <BLDCDriver_SetPWM+0x76>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	edd3 7a01 	vldr	s15, [r3, #4]
 8001218:	ed97 7a01 	vldr	s14, [r7, #4]
 800121c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dd02      	ble.n	800122c <BLDCDriver_SetPWM+0x74>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	e000      	b.n	800122e <BLDCDriver_SetPWM+0x76>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	607b      	str	r3, [r7, #4]
	Uc = _constrain(Uc, 0.0f, BLDCDriver->voltage_limit);
 8001230:	edd7 7a00 	vldr	s15, [r7]
 8001234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123c:	d502      	bpl.n	8001244 <BLDCDriver_SetPWM+0x8c>
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e00d      	b.n	8001260 <BLDCDriver_SetPWM+0xa8>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	edd3 7a01 	vldr	s15, [r3, #4]
 800124a:	ed97 7a00 	vldr	s14, [r7]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd02      	ble.n	800125e <BLDCDriver_SetPWM+0xa6>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	e000      	b.n	8001260 <BLDCDriver_SetPWM+0xa8>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	603b      	str	r3, [r7, #0]

	// calculate duty cycle limited in [0,1]
	BLDCDriver->dc_a = _constrain(
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	ed93 7a00 	vldr	s14, [r3]
 8001268:	edd7 6a02 	vldr	s13, [r7, #8]
 800126c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	d502      	bpl.n	8001280 <BLDCDriver_SetPWM+0xc8>
 800127a:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 800136c <BLDCDriver_SetPWM+0x1b4>
 800127e:	e017      	b.n	80012b0 <BLDCDriver_SetPWM+0xf8>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	ed93 7a00 	vldr	s14, [r3]
 8001286:	edd7 6a02 	vldr	s13, [r7, #8]
 800128a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd02      	ble.n	80012a2 <BLDCDriver_SetPWM+0xea>
 800129c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80012a0:	e006      	b.n	80012b0 <BLDCDriver_SetPWM+0xf8>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	ed93 7a00 	vldr	s14, [r3]
 80012a8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	edc3 7a02 	vstr	s15, [r3, #8]
			Ua / BLDCDriver->voltage_power_supply, 0.0f, 1.0f);
	BLDCDriver->dc_b = _constrain(
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	ed93 7a00 	vldr	s14, [r3]
 80012bc:	edd7 6a01 	vldr	s13, [r7, #4]
 80012c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d502      	bpl.n	80012d4 <BLDCDriver_SetPWM+0x11c>
 80012ce:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800136c <BLDCDriver_SetPWM+0x1b4>
 80012d2:	e017      	b.n	8001304 <BLDCDriver_SetPWM+0x14c>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	ed93 7a00 	vldr	s14, [r3]
 80012da:	edd7 6a01 	vldr	s13, [r7, #4]
 80012de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	dd02      	ble.n	80012f6 <BLDCDriver_SetPWM+0x13e>
 80012f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80012f4:	e006      	b.n	8001304 <BLDCDriver_SetPWM+0x14c>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	edd7 6a01 	vldr	s13, [r7, #4]
 8001300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	edc3 7a03 	vstr	s15, [r3, #12]
			Ub / BLDCDriver->voltage_power_supply, 0.0f, 1.0f);
	BLDCDriver->dc_c = _constrain(
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	edd7 6a00 	vldr	s13, [r7]
 8001314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d502      	bpl.n	8001328 <BLDCDriver_SetPWM+0x170>
 8001322:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800136c <BLDCDriver_SetPWM+0x1b4>
 8001326:	e017      	b.n	8001358 <BLDCDriver_SetPWM+0x1a0>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	ed93 7a00 	vldr	s14, [r3]
 800132e:	edd7 6a00 	vldr	s13, [r7]
 8001332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800133a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dd02      	ble.n	800134a <BLDCDriver_SetPWM+0x192>
 8001344:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001348:	e006      	b.n	8001358 <BLDCDriver_SetPWM+0x1a0>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	ed93 7a00 	vldr	s14, [r3]
 8001350:	edd7 6a00 	vldr	s13, [r7]
 8001354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	edc3 7a04 	vstr	s15, [r3, #16]
			Uc / BLDCDriver->voltage_power_supply, 0.0f, 1.0f);

	// write in proper timer
	BLDCDriver_WriteDutyCycle(BLDCDriver);
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 f806 	bl	8001370 <BLDCDriver_WriteDutyCycle>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	00000000 	.word	0x00000000

08001370 <BLDCDriver_WriteDutyCycle>:
 * @brief : BLDC Driver Write Duty Cycle in proper Timer
 * @param :
 *         BLDCDriver --> pointer to BLDCDriver_s structure
 */
void BLDCDriver_WriteDutyCycle(BLDCDriver_s *BLDCDriver)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	// PWM counts
	uint32_t ticks = TIM3->ARR + 1;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <BLDCDriver_WriteDutyCycle+0x7c>)
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]

	// write in timer 3
	TIM3->CCR1 = (ticks * BLDCDriver->dc_a);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <BLDCDriver_WriteDutyCycle+0x7c>)
 8001396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139a:	ee17 2a90 	vmov	r2, s15
 800139e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = (ticks * BLDCDriver->dc_b);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <BLDCDriver_WriteDutyCycle+0x7c>)
 80013b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ba:	ee17 2a90 	vmov	r2, s15
 80013be:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = (ticks * BLDCDriver->dc_c);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <BLDCDriver_WriteDutyCycle+0x7c>)
 80013d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013da:	ee17 2a90 	vmov	r2, s15
 80013de:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40000400 	.word	0x40000400

080013f0 <BLDCMotor_Init>:
 * 			_R        --> phase resistance (Not Set by default)
 * 			_L        --> phase inductance (Not Set by default)
 * 			_KV       --> kv rating        (Not Set by default)
 */
void BLDCMotor_Init(BLDCMotor_s *BLDCMotor, int _PP,  float _R, float _KV, float _L)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6178      	str	r0, [r7, #20]
 80013f8:	6139      	str	r1, [r7, #16]
 80013fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80013fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8001402:	ed87 1a01 	vstr	s2, [r7, #4]
	// assume modulation centered
	BLDCMotor->feed_forward_velocity = 0.0f;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
	BLDCMotor->modulation_centered = 1;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

	// maximum velocity to be set to the motor
	BLDCMotor->velocity_limit = DEF_MOT_VEL_LIM;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	4a46      	ldr	r2, [pc, #280]	@ (8001534 <BLDCMotor_Init+0x144>)
 800141a:	649a      	str	r2, [r3, #72]	@ 0x48

	// maximum voltage to be set to the motor
	BLDCMotor->voltage_limit  = DEF_MOT_VOLT_LIM;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4a46      	ldr	r2, [pc, #280]	@ (8001538 <BLDCMotor_Init+0x148>)
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40

	// maximum current to be set to the motor
	BLDCMotor->current_limit  = DEF_MOT_CURR_LIM;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001428:	645a      	str	r2, [r3, #68]	@ 0x44

	// default target value
	BLDCMotor->target    = 0;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
	BLDCMotor->current.d = 0;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
	BLDCMotor->current.q = 0;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
	BLDCMotor->voltage.d = 0;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
	BLDCMotor->voltage.q = 0;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	621a      	str	r2, [r3, #32]

	// voltage back emf
	BLDCMotor->voltage_bemf = 0;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c

	// initial phase voltages
	BLDCMotor->Ua = 0.0;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	64da      	str	r2, [r3, #76]	@ 0x4c
	BLDCMotor->Ub = 0.0;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	651a      	str	r2, [r3, #80]	@ 0x50
	BLDCMotor->Uc = 0.0;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54

	// initial Park and Clarke voltages
	BLDCMotor->Ualpha = 0.0;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	659a      	str	r2, [r3, #88]	@ 0x58
	BLDCMotor->Ubeta  = 0.0;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	65da      	str	r2, [r3, #92]	@ 0x5c

	// save pole pairs number
	BLDCMotor->pole_pairs = _PP;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34

	// save phase resistance number
	BLDCMotor->phase_resistance = NOT_SET;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4a2c      	ldr	r2, [pc, #176]	@ (800153c <BLDCMotor_Init+0x14c>)
 800148c:	631a      	str	r2, [r3, #48]	@ 0x30
	if (_isset(_R))
 800148e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001492:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001540 <BLDCMotor_Init+0x150>
 8001496:	eef4 7a47 	vcmp.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	d002      	beq.n	80014a6 <BLDCMotor_Init+0xb6>
		BLDCMotor->phase_resistance = _R;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	631a      	str	r2, [r3, #48]	@ 0x30

	// save back emf constant KV = 1/KV
	// 1/sqrt(2) - rms value
	BLDCMotor->KV_rating = NOT_SET;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	4a24      	ldr	r2, [pc, #144]	@ (800153c <BLDCMotor_Init+0x14c>)
 80014aa:	639a      	str	r2, [r3, #56]	@ 0x38
	if (_isset(_KV))
 80014ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001540 <BLDCMotor_Init+0x150>
 80014b4:	eef4 7a47 	vcmp.f32	s15, s14
 80014b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014bc:	d002      	beq.n	80014c4 <BLDCMotor_Init+0xd4>
		BLDCMotor->KV_rating = _KV;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	639a      	str	r2, [r3, #56]	@ 0x38

	// save phase inductance
	BLDCMotor->phase_inductance = NOT_SET;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	4a1d      	ldr	r2, [pc, #116]	@ (800153c <BLDCMotor_Init+0x14c>)
 80014c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (_isset(_L))
 80014ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ce:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001540 <BLDCMotor_Init+0x150>
 80014d2:	eef4 7a47 	vcmp.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	d002      	beq.n	80014e2 <BLDCMotor_Init+0xf2>
		BLDCMotor->phase_inductance = _L;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	63da      	str	r2, [r3, #60]	@ 0x3c

	// sanity check for the voltage limit configuration
	if (BLDCMotor->voltage_limit
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			> BLDCMotor->BLDCDriver->voltage_limit)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014ec:	edd3 7a01 	vldr	s15, [r3, #4]
	if (BLDCMotor->voltage_limit
 80014f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	dd04      	ble.n	8001504 <BLDCMotor_Init+0x114>
		BLDCMotor->voltage_limit =
				BLDCMotor->BLDCDriver->voltage_limit;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014fe:	685a      	ldr	r2, [r3, #4]
		BLDCMotor->voltage_limit =
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	641a      	str	r2, [r3, #64]	@ 0x40

	// initial angles
	BLDCMotor->shaft_angle      = 0.0;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
	BLDCMotor->electrical_angle = 0.0;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	60da      	str	r2, [r3, #12]

	// set zero to PWM
	BLDCDriver_SetPWM(BLDCMotor->BLDCDriver, 0.0f, 0.0f, 0.0f);
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001518:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8001544 <BLDCMotor_Init+0x154>
 800151c:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001544 <BLDCMotor_Init+0x154>
 8001520:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001544 <BLDCMotor_Init+0x154>
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe47 	bl	80011b8 <BLDCDriver_SetPWM>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40a00000 	.word	0x40a00000
 8001538:	41c00000 	.word	0x41c00000
 800153c:	c640e400 	.word	0xc640e400
 8001540:	c640e400 	.word	0xc640e400
 8001544:	00000000 	.word	0x00000000

08001548 <BLDCMotor_LinkDriver>:
 * @param :
 * 			BLDCMotor  --> pointer to BLDCMotor_s  structure, handle motor  params
 * 			BLDCDriver --> pointer to BLDCDriver_s structure, handle driver params
 */
void BLDCMotor_LinkDriver(BLDCMotor_s *BLDCMotor, BLDCDriver_s *BLDCDriver)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	// link driver
	BLDCMotor->BLDCDriver = BLDCDriver;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <BLDCMotor_RunOpenloop>:
 * @param :
 * 			BLDCMotor --> pointer to BLDCMotor_s structure, handle motor params
 * 			target    --> target angle in radians
 */
void BLDCMotor_RunOpenloop(BLDCMotor_s *BLDCMotor, float target)
{
 8001564:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	ed87 0a00 	vstr	s0, [r7]
	// get current time
	unsigned long now_us = _tim_usec_val_();
 8001572:	f7ff fdff 	bl	8001174 <_tim_usec_val_>
 8001576:	60f8      	str	r0, [r7, #12]

	// calculate the sample time from last call
	float Ts = (now_us - BLDCMotor->open_loop_timestamp) * 1e-6f;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158a:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8001858 <BLDCMotor_RunOpenloop+0x2f4>
 800158e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001592:	edc7 7a05 	vstr	s15, [r7, #20]

	// quick fix for strange cases (timer overflow or time stamp not defined)
	if (Ts <= 0 || Ts > 0.5f)
 8001596:	edd7 7a05 	vldr	s15, [r7, #20]
 800159a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	d908      	bls.n	80015b6 <BLDCMotor_RunOpenloop+0x52>
 80015a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80015ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	dd01      	ble.n	80015ba <BLDCMotor_RunOpenloop+0x56>
		Ts = 1e-3f;
 80015b6:	4ba9      	ldr	r3, [pc, #676]	@ (800185c <BLDCMotor_RunOpenloop+0x2f8>)
 80015b8:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (fabs(target - BLDCMotor->shaft_angle)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015c0:	ed97 7a00 	vldr	s14, [r7]
 80015c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c8:	eeb0 7ae7 	vabs.f32	s14, s15
			> fabs(BLDCMotor->velocity_limit * Ts))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 80015d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015da:	eef0 7ae7 	vabs.f32	s15, s15
	if (fabs(target - BLDCMotor->shaft_angle)
 80015de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	dd5a      	ble.n	800169e <BLDCMotor_RunOpenloop+0x13a>
	{
		BLDCMotor->shaft_angle +=
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff4f 	bl	8000490 <__aeabi_f2d>
 80015f2:	4680      	mov	r8, r0
 80015f4:	4689      	mov	r9, r1
				_sign(target - BLDCMotor->shaft_angle)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015fc:	ed97 7a00 	vldr	s14, [r7]
 8001600:	ee77 7a67 	vsub.f32	s15, s14, s15
						* fabs(BLDCMotor->velocity_limit) * Ts;
 8001604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d503      	bpl.n	8001616 <BLDCMotor_RunOpenloop+0xb2>
 800160e:	f04f 0400 	mov.w	r4, #0
 8001612:	4d93      	ldr	r5, [pc, #588]	@ (8001860 <BLDCMotor_RunOpenloop+0x2fc>)
 8001614:	e013      	b.n	800163e <BLDCMotor_RunOpenloop+0xda>
				_sign(target - BLDCMotor->shaft_angle)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edd3 7a02 	vldr	s15, [r3, #8]
 800161c:	ed97 7a00 	vldr	s14, [r7]
 8001620:	ee77 7a67 	vsub.f32	s15, s14, s15
						* fabs(BLDCMotor->velocity_limit) * Ts;
 8001624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162c:	dd03      	ble.n	8001636 <BLDCMotor_RunOpenloop+0xd2>
 800162e:	f04f 0400 	mov.w	r4, #0
 8001632:	4d8c      	ldr	r5, [pc, #560]	@ (8001864 <BLDCMotor_RunOpenloop+0x300>)
 8001634:	e003      	b.n	800163e <BLDCMotor_RunOpenloop+0xda>
 8001636:	f04f 0400 	mov.w	r4, #0
 800163a:	f04f 0500 	mov.w	r5, #0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001644:	eef0 7ae7 	vabs.f32	s15, s15
 8001648:	ee17 0a90 	vmov	r0, s15
 800164c:	f7fe ff20 	bl	8000490 <__aeabi_f2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe ff72 	bl	8000540 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4614      	mov	r4, r2
 8001662:	461d      	mov	r5, r3
 8001664:	6978      	ldr	r0, [r7, #20]
 8001666:	f7fe ff13 	bl	8000490 <__aeabi_f2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe ff65 	bl	8000540 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
		BLDCMotor->shaft_angle +=
 800167a:	4640      	mov	r0, r8
 800167c:	4649      	mov	r1, r9
 800167e:	f7fe fda9 	bl	80001d4 <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff f9f3 	bl	8000a74 <__aeabi_d2f>
 800168e:	4602      	mov	r2, r0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
		BLDCMotor->shaft_velocity = BLDCMotor->velocity_limit;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	e006      	b.n	80016ac <BLDCMotor_RunOpenloop+0x148>
	}
	else
	{
		BLDCMotor->shaft_angle = target;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	609a      	str	r2, [r3, #8]
		BLDCMotor->shaft_velocity = 0;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
	}

	// use voltage limit or current limit
	float Uq = BLDCMotor->voltage_limit;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	613b      	str	r3, [r7, #16]
	if (_isset(BLDCMotor->phase_resistance))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80016b8:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001868 <BLDCMotor_RunOpenloop+0x304>
 80016bc:	eef4 7a47 	vcmp.f32	s15, s14
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	f000 80aa 	beq.w	800181c <BLDCMotor_RunOpenloop+0x2b8>
	{
		Uq = _constrain(
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80016d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d8:	ee17 0a90 	vmov	r0, s15
 80016dc:	f7fe fed8 	bl	8000490 <__aeabi_f2d>
 80016e0:	4604      	mov	r4, r0
 80016e2:	460d      	mov	r5, r1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80016ea:	eef0 7ae7 	vabs.f32	s15, s15
 80016ee:	ee17 0a90 	vmov	r0, s15
 80016f2:	f7fe fecd 	bl	8000490 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7fe fd69 	bl	80001d4 <__adddf3>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4614      	mov	r4, r2
 8001708:	461d      	mov	r5, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001710:	eef1 7a67 	vneg.f32	s15, s15
 8001714:	ee17 3a90 	vmov	r3, s15
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe feb9 	bl	8000490 <__aeabi_f2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4620      	mov	r0, r4
 8001724:	4629      	mov	r1, r5
 8001726:	f7ff f97d 	bl	8000a24 <__aeabi_dcmplt>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <BLDCMotor_RunOpenloop+0x1d8>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001736:	eef1 7a67 	vneg.f32	s15, s15
 800173a:	e041      	b.n	80017c0 <BLDCMotor_RunOpenloop+0x25c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	ee17 0a90 	vmov	r0, s15
 8001750:	f7fe fe9e 	bl	8000490 <__aeabi_f2d>
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800175e:	eef0 7ae7 	vabs.f32	s15, s15
 8001762:	ee17 0a90 	vmov	r0, s15
 8001766:	f7fe fe93 	bl	8000490 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe fd2f 	bl	80001d4 <__adddf3>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4614      	mov	r4, r2
 800177c:	461d      	mov	r5, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe84 	bl	8000490 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7ff f966 	bl	8000a60 <__aeabi_dcmpgt>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <BLDCMotor_RunOpenloop+0x23e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80017a0:	e00e      	b.n	80017c0 <BLDCMotor_RunOpenloop+0x25c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80017ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017b8:	eef0 7ae7 	vabs.f32	s15, s15
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	edc7 7a04 	vstr	s15, [r7, #16]
						+ fabs(BLDCMotor->voltage_bemf),
				-BLDCMotor->voltage_limit,
				BLDCMotor->voltage_limit);
		// recalculate the current
		BLDCMotor->current.q = (Uq
				- fabs(BLDCMotor->voltage_bemf))
 80017c4:	6938      	ldr	r0, [r7, #16]
 80017c6:	f7fe fe63 	bl	8000490 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017d4:	eef0 7ae7 	vabs.f32	s15, s15
 80017d8:	ee17 0a90 	vmov	r0, s15
 80017dc:	f7fe fe58 	bl	8000490 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fcf2 	bl	80001d0 <__aeabi_dsub>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
				/ BLDCMotor->phase_resistance;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe49 	bl	8000490 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7fe ffc5 	bl	8000794 <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f92f 	bl	8000a74 <__aeabi_d2f>
 8001816:	4602      	mov	r2, r0
		BLDCMotor->current.q = (Uq
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	float elec_angle = BLDCMotor->shaft_angle * BLDCMotor->pole_pairs;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001832:	edc7 7a02 	vstr	s15, [r7, #8]
	BLDCMotor_SetPhaseVoltage(BLDCMotor, Uq, 0, elec_angle);
 8001836:	ed97 1a02 	vldr	s2, [r7, #8]
 800183a:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800186c <BLDCMotor_RunOpenloop+0x308>
 800183e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f888 	bl	8001958 <BLDCMotor_SetPhaseVoltage>

	// save time stamp for next call
	BLDCMotor->open_loop_timestamp = now_us;
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001858:	358637bd 	.word	0x358637bd
 800185c:	3a83126f 	.word	0x3a83126f
 8001860:	bff00000 	.word	0xbff00000
 8001864:	3ff00000 	.word	0x3ff00000
 8001868:	c640e400 	.word	0xc640e400
 800186c:	00000000 	.word	0x00000000

08001870 <BLDCMotor_Move>:
 * @param :
 * 			BLDCMotor --> pointer to BLDCMotor_s structure, handle motor params
 * 			target    --> target angle in radians
 */
void BLDCMotor_Move(BLDCMotor_s *BLDCMotor, float target)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	ed87 0a00 	vstr	s0, [r7]
	// set internal target variable
	BLDCMotor->target = fabs(target);
 800187c:	edd7 7a00 	vldr	s15, [r7]
 8001880:	eef0 7ae7 	vabs.f32	s15, s15
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	edc3 7a00 	vstr	s15, [r3]

	// movement direction
	BLDCMotor->direction = _sign(target);
 800188a:	edd7 7a00 	vldr	s15, [r7]
 800188e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	d501      	bpl.n	800189c <BLDCMotor_Move+0x2c>
 8001898:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <BLDCMotor_Move+0xd8>)
 800189a:	e00b      	b.n	80018b4 <BLDCMotor_Move+0x44>
 800189c:	edd7 7a00 	vldr	s15, [r7]
 80018a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	dd02      	ble.n	80018b0 <BLDCMotor_Move+0x40>
 80018aa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018ae:	e001      	b.n	80018b4 <BLDCMotor_Move+0x44>
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	66d3      	str	r3, [r2, #108]	@ 0x6c

	// calculate the back-emf voltage if KV_rating available U_bemf = vel*(1/KV)
	if (_isset(BLDCMotor->KV_rating))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80018be:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800194c <BLDCMotor_Move+0xdc>
 80018c2:	eef4 7a47 	vcmp.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d012      	beq.n	80018f2 <BLDCMotor_Move+0x82>
		BLDCMotor->voltage_bemf = BLDCMotor->shaft_velocity
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	edd3 6a04 	vldr	s13, [r3, #16]
				/ (BLDCMotor->KV_rating * _SQRT3) / _RPM_TO_RADS;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80018d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001950 <BLDCMotor_Move+0xe0>
 80018dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018e4:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001954 <BLDCMotor_Move+0xe4>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
		BLDCMotor->voltage_bemf = BLDCMotor->shaft_velocity
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// estimate the motor current if phase resistance available
	if (_isset(BLDCMotor->phase_resistance))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80018f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800194c <BLDCMotor_Move+0xdc>
 80018fc:	eef4 7a47 	vcmp.f32	s15, s14
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	d00f      	beq.n	8001926 <BLDCMotor_Move+0xb6>
		BLDCMotor->current.q = (BLDCMotor->voltage.q
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	ed93 7a08 	vldr	s14, [r3, #32]
				- BLDCMotor->voltage_bemf)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001912:	ee77 6a67 	vsub.f32	s13, s14, s15
				/ BLDCMotor->phase_resistance;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800191c:	eec6 7a87 	vdiv.f32	s15, s13, s14
		BLDCMotor->current.q = (BLDCMotor->voltage.q
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// set target
	BLDCMotor->shaft_angle_sp = BLDCMotor->target;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	619a      	str	r2, [r3, #24]
	BLDCMotor_RunOpenloop(BLDCMotor, BLDCMotor->shaft_angle_sp);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edd3 7a06 	vldr	s15, [r3, #24]
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fe13 	bl	8001564 <BLDCMotor_RunOpenloop>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	bf800000 	.word	0xbf800000
 800194c:	c640e400 	.word	0xc640e400
 8001950:	3fddb3d7 	.word	0x3fddb3d7
 8001954:	3dd67750 	.word	0x3dd67750

08001958 <BLDCMotor_SetPhaseVoltage>:
 * 			BLDCMotor  --> pointer to BLDCMotor_s  structure, handle motor  params
 * 			Uq, Ud     --> Park and Clarke voltages
 * 			elec_angle --> electrical angle
 */
void BLDCMotor_SetPhaseVoltage(BLDCMotor_s *BLDCMotor, float Uq, float Ud, float elec_angle)
{
 8001958:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800195c:	b08a      	sub	sp, #40	@ 0x28
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	ed87 0a02 	vstr	s0, [r7, #8]
 8001966:	edc7 0a01 	vstr	s1, [r7, #4]
 800196a:	ed87 1a00 	vstr	s2, [r7]
	float center;
	float _ca, _sa;

	// sinusoidal PWM modulation Inverse Park + Clarke transformation
	_sincos(elec_angle, &_sa, &_ca);
 800196e:	f107 0214 	add.w	r2, r7, #20
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	ed97 0a00 	vldr	s0, [r7]
 800197e:	f7ff f971 	bl	8000c64 <_sincos>

	// Inverse park transform
	BLDCMotor->Ualpha = _ca * Ud - _sa * Uq;  // -sin(angle) * Uq;
 8001982:	ed97 7a05 	vldr	s14, [r7, #20]
 8001986:	edd7 7a01 	vldr	s15, [r7, #4]
 800198a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001992:	edd7 7a02 	vldr	s15, [r7, #8]
 8001996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
	BLDCMotor->Ubeta  = _sa * Ud + _ca * Uq;  //  cos(angle) * Uq;
 80019a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80019a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80019b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	// Clarke transform
	BLDCMotor->Ua = BLDCMotor->Ualpha;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	64da      	str	r2, [r3, #76]	@ 0x4c
	BLDCMotor->Ub = -0.5f * BLDCMotor->Ualpha + _SQRT3_2 * BLDCMotor->Ubeta;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80019d4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80019d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80019e2:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8001be4 <BLDCMotor_SetPhaseVoltage+0x28c>
 80019e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	BLDCMotor->Uc = -0.5f * BLDCMotor->Ualpha - _SQRT3_2 * BLDCMotor->Ubeta;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80019fa:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80019fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001a08:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8001be4 <BLDCMotor_SetPhaseVoltage+0x28c>
 8001a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

	center = BLDCMotor->voltage_limit / 2;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001a20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Midpoint Clamp
	float Umin = fmin(BLDCMotor->Ua, fmin(BLDCMotor->Ub, BLDCMotor->Uc));
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd2d 	bl	8000490 <__aeabi_f2d>
 8001a36:	4604      	mov	r4, r0
 8001a38:	460d      	mov	r5, r1
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd26 	bl	8000490 <__aeabi_f2d>
 8001a44:	4680      	mov	r8, r0
 8001a46:	4689      	mov	r9, r1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd1f 	bl	8000490 <__aeabi_f2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ec43 2b11 	vmov	d1, r2, r3
 8001a5a:	ec49 8b10 	vmov	d0, r8, r9
 8001a5e:	f000 f93b 	bl	8001cd8 <fmin>
 8001a62:	eeb0 7a40 	vmov.f32	s14, s0
 8001a66:	eef0 7a60 	vmov.f32	s15, s1
 8001a6a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a6e:	eef0 1a67 	vmov.f32	s3, s15
 8001a72:	ec45 4b10 	vmov	d0, r4, r5
 8001a76:	f000 f92f 	bl	8001cd8 <fmin>
 8001a7a:	ec53 2b10 	vmov	r2, r3, d0
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7fe fff7 	bl	8000a74 <__aeabi_d2f>
 8001a86:	4603      	mov	r3, r0
 8001a88:	623b      	str	r3, [r7, #32]
	float Umax = fmax(BLDCMotor->Ua, fmax(BLDCMotor->Ub, BLDCMotor->Uc));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fcfe 	bl	8000490 <__aeabi_f2d>
 8001a94:	4604      	mov	r4, r0
 8001a96:	460d      	mov	r5, r1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fcf7 	bl	8000490 <__aeabi_f2d>
 8001aa2:	4680      	mov	r8, r0
 8001aa4:	4689      	mov	r9, r1
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fcf0 	bl	8000490 <__aeabi_f2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	ec43 2b11 	vmov	d1, r2, r3
 8001ab8:	ec49 8b10 	vmov	d0, r8, r9
 8001abc:	f000 f8e2 	bl	8001c84 <fmax>
 8001ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac4:	eef0 7a60 	vmov.f32	s15, s1
 8001ac8:	eeb0 1a47 	vmov.f32	s2, s14
 8001acc:	eef0 1a67 	vmov.f32	s3, s15
 8001ad0:	ec45 4b10 	vmov	d0, r4, r5
 8001ad4:	f000 f8d6 	bl	8001c84 <fmax>
 8001ad8:	ec53 2b10 	vmov	r2, r3, d0
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7fe ffc8 	bl	8000a74 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	61fb      	str	r3, [r7, #28]
	center -= (Umax + Umin) / 2;
 8001ae8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aec:	edd7 7a08 	vldr	s15, [r7, #32]
 8001af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b04:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (!BLDCMotor->modulation_centered)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11e      	bne.n	8001b50 <BLDCMotor_SetPhaseVoltage+0x1f8>
	{
		BLDCMotor->Ua -= Umin;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001b18:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		BLDCMotor->Ub -= Umin;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001b2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		BLDCMotor->Uc -= Umin;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001b40:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 8001b4e:	e01d      	b.n	8001b8c <BLDCMotor_SetPhaseVoltage+0x234>
	}
	else
	{
		BLDCMotor->Ua += center;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001b56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		BLDCMotor->Ub += center;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001b6a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		BLDCMotor->Uc += center;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001b7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	}

	// swap PWM pins regarding movement direction
	if (BLDCMotor->direction < 0)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001b92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d509      	bpl.n	8001bb0 <BLDCMotor_SetPhaseVoltage+0x258>
	{
		float temp = BLDCMotor->Ub;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba0:	61bb      	str	r3, [r7, #24]
		BLDCMotor->Ub = BLDCMotor->Uc;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	651a      	str	r2, [r3, #80]	@ 0x50
		BLDCMotor->Uc = temp;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	655a      	str	r2, [r3, #84]	@ 0x54
	}

	// set the voltages in driver
	BLDCDriver_SetPWM(BLDCMotor->BLDCDriver, BLDCMotor->Ua, BLDCMotor->Ub, BLDCMotor->Uc);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8001bc6:	eeb0 1a66 	vmov.f32	s2, s13
 8001bca:	eef0 0a47 	vmov.f32	s1, s14
 8001bce:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f7ff faf0 	bl	80011b8 <BLDCDriver_SetPWM>
}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	@ 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001be2:	bf00      	nop
 8001be4:	3f5db3d7 	.word	0x3f5db3d7

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bec:	f7ff f8c8 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bf2:	490d      	ldr	r1, [pc, #52]	@ (8001c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c08:	4c0a      	ldr	r4, [pc, #40]	@ (8001c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c16:	f000 f811 	bl	8001c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7ff f841 	bl	8000ca0 <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001c2c:	08001db0 	.word	0x08001db0
  ldr r2, =_sbss
 8001c30:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001c34:	200000a4 	.word	0x200000a4

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>
	...

08001c3c <__libc_init_array>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8001c74 <__libc_init_array+0x38>)
 8001c40:	4c0d      	ldr	r4, [pc, #52]	@ (8001c78 <__libc_init_array+0x3c>)
 8001c42:	1b64      	subs	r4, r4, r5
 8001c44:	10a4      	asrs	r4, r4, #2
 8001c46:	2600      	movs	r6, #0
 8001c48:	42a6      	cmp	r6, r4
 8001c4a:	d109      	bne.n	8001c60 <__libc_init_array+0x24>
 8001c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8001c7c <__libc_init_array+0x40>)
 8001c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8001c80 <__libc_init_array+0x44>)
 8001c50:	f000 f896 	bl	8001d80 <_init>
 8001c54:	1b64      	subs	r4, r4, r5
 8001c56:	10a4      	asrs	r4, r4, #2
 8001c58:	2600      	movs	r6, #0
 8001c5a:	42a6      	cmp	r6, r4
 8001c5c:	d105      	bne.n	8001c6a <__libc_init_array+0x2e>
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
 8001c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c64:	4798      	blx	r3
 8001c66:	3601      	adds	r6, #1
 8001c68:	e7ee      	b.n	8001c48 <__libc_init_array+0xc>
 8001c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c6e:	4798      	blx	r3
 8001c70:	3601      	adds	r6, #1
 8001c72:	e7f2      	b.n	8001c5a <__libc_init_array+0x1e>
 8001c74:	08001da8 	.word	0x08001da8
 8001c78:	08001da8 	.word	0x08001da8
 8001c7c:	08001da8 	.word	0x08001da8
 8001c80:	08001dac 	.word	0x08001dac

08001c84 <fmax>:
 8001c84:	b508      	push	{r3, lr}
 8001c86:	ed2d 8b04 	vpush	{d8-d9}
 8001c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8001c8e:	eef0 8a60 	vmov.f32	s17, s1
 8001c92:	eeb0 9a41 	vmov.f32	s18, s2
 8001c96:	eef0 9a61 	vmov.f32	s19, s3
 8001c9a:	f000 f847 	bl	8001d2c <__fpclassifyd>
 8001c9e:	b950      	cbnz	r0, 8001cb6 <fmax+0x32>
 8001ca0:	eeb0 8a49 	vmov.f32	s16, s18
 8001ca4:	eef0 8a69 	vmov.f32	s17, s19
 8001ca8:	eeb0 0a48 	vmov.f32	s0, s16
 8001cac:	eef0 0a68 	vmov.f32	s1, s17
 8001cb0:	ecbd 8b04 	vpop	{d8-d9}
 8001cb4:	bd08      	pop	{r3, pc}
 8001cb6:	eeb0 0a49 	vmov.f32	s0, s18
 8001cba:	eef0 0a69 	vmov.f32	s1, s19
 8001cbe:	f000 f835 	bl	8001d2c <__fpclassifyd>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <fmax+0x24>
 8001cc6:	ec53 2b19 	vmov	r2, r3, d9
 8001cca:	ec51 0b18 	vmov	r0, r1, d8
 8001cce:	f7fe fec7 	bl	8000a60 <__aeabi_dcmpgt>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d0e4      	beq.n	8001ca0 <fmax+0x1c>
 8001cd6:	e7e7      	b.n	8001ca8 <fmax+0x24>

08001cd8 <fmin>:
 8001cd8:	b508      	push	{r3, lr}
 8001cda:	ed2d 8b04 	vpush	{d8-d9}
 8001cde:	eeb0 8a40 	vmov.f32	s16, s0
 8001ce2:	eef0 8a60 	vmov.f32	s17, s1
 8001ce6:	eeb0 9a41 	vmov.f32	s18, s2
 8001cea:	eef0 9a61 	vmov.f32	s19, s3
 8001cee:	f000 f81d 	bl	8001d2c <__fpclassifyd>
 8001cf2:	b950      	cbnz	r0, 8001d0a <fmin+0x32>
 8001cf4:	eeb0 8a49 	vmov.f32	s16, s18
 8001cf8:	eef0 8a69 	vmov.f32	s17, s19
 8001cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8001d00:	eef0 0a68 	vmov.f32	s1, s17
 8001d04:	ecbd 8b04 	vpop	{d8-d9}
 8001d08:	bd08      	pop	{r3, pc}
 8001d0a:	eeb0 0a49 	vmov.f32	s0, s18
 8001d0e:	eef0 0a69 	vmov.f32	s1, s19
 8001d12:	f000 f80b 	bl	8001d2c <__fpclassifyd>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d0f0      	beq.n	8001cfc <fmin+0x24>
 8001d1a:	ec53 2b19 	vmov	r2, r3, d9
 8001d1e:	ec51 0b18 	vmov	r0, r1, d8
 8001d22:	f7fe fe7f 	bl	8000a24 <__aeabi_dcmplt>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d0e4      	beq.n	8001cf4 <fmin+0x1c>
 8001d2a:	e7e7      	b.n	8001cfc <fmin+0x24>

08001d2c <__fpclassifyd>:
 8001d2c:	ec51 0b10 	vmov	r0, r1, d0
 8001d30:	b510      	push	{r4, lr}
 8001d32:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8001d36:	460b      	mov	r3, r1
 8001d38:	d019      	beq.n	8001d6e <__fpclassifyd+0x42>
 8001d3a:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8001d3e:	490e      	ldr	r1, [pc, #56]	@ (8001d78 <__fpclassifyd+0x4c>)
 8001d40:	428a      	cmp	r2, r1
 8001d42:	d90e      	bls.n	8001d62 <__fpclassifyd+0x36>
 8001d44:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8001d48:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8001d4c:	428a      	cmp	r2, r1
 8001d4e:	d908      	bls.n	8001d62 <__fpclassifyd+0x36>
 8001d50:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <__fpclassifyd+0x50>)
 8001d52:	4213      	tst	r3, r2
 8001d54:	d007      	beq.n	8001d66 <__fpclassifyd+0x3a>
 8001d56:	4294      	cmp	r4, r2
 8001d58:	d107      	bne.n	8001d6a <__fpclassifyd+0x3e>
 8001d5a:	fab0 f080 	clz	r0, r0
 8001d5e:	0940      	lsrs	r0, r0, #5
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	2004      	movs	r0, #4
 8001d64:	e7fc      	b.n	8001d60 <__fpclassifyd+0x34>
 8001d66:	2003      	movs	r0, #3
 8001d68:	e7fa      	b.n	8001d60 <__fpclassifyd+0x34>
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	e7f8      	b.n	8001d60 <__fpclassifyd+0x34>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d1ee      	bne.n	8001d50 <__fpclassifyd+0x24>
 8001d72:	2002      	movs	r0, #2
 8001d74:	e7f4      	b.n	8001d60 <__fpclassifyd+0x34>
 8001d76:	bf00      	nop
 8001d78:	7fdfffff 	.word	0x7fdfffff
 8001d7c:	7ff00000 	.word	0x7ff00000

08001d80 <_init>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	bf00      	nop
 8001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d86:	bc08      	pop	{r3}
 8001d88:	469e      	mov	lr, r3
 8001d8a:	4770      	bx	lr

08001d8c <_fini>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr
