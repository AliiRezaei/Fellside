
SingleMotorOpenLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000438  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c0  080005c8  000015c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c0  080005c0  000015c8  2**0
                  CONTENTS
  4 .ARM          00000000  080005c0  080005c0  000015c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c0  080005c8  000015c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c0  080005c0  000015c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005c4  080005c4  000015c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000015c8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013e2  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000041c  00000000  00000000  000029da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00002df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000086  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191cc  00000000  00000000  00002f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c9e  00000000  00000000  0001c11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c515  00000000  00000000  0001ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa2cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000198  00000000  00000000  000aa310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000aa4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005a8 	.word	0x080005a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080005a8 	.word	0x080005a8

080001c8 <main>:
 */

#include "main.h"

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	// system clock configuration
	rcc_SysClock_Config();
 80001cc:	f000 f86e 	bl	80002ac <rcc_SysClock_Config>

	// systick timer configuration
	rcc_SysTick_Config();
 80001d0:	f000 f8d4 	bl	800037c <rcc_SysTick_Config>

	// timer 3 PWM configuration
	tim_TIM3_3PWM_Config();
 80001d4:	f000 f8f6 	bl	80003c4 <tim_TIM3_3PWM_Config>

	// test PWMs
	TIM3->CCR1 = 1680 * 0.25;
 80001d8:	4b06      	ldr	r3, [pc, #24]	@ (80001f4 <main+0x2c>)
 80001da:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80001de:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 1680 * 0.50;
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <main+0x2c>)
 80001e2:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80001e6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = 1680 * 0.75;
 80001e8:	4b02      	ldr	r3, [pc, #8]	@ (80001f4 <main+0x2c>)
 80001ea:	f240 42ec 	movw	r2, #1260	@ 0x4ec
 80001ee:	63da      	str	r2, [r3, #60]	@ 0x3c

	while(1) {;}
 80001f0:	bf00      	nop
 80001f2:	e7fd      	b.n	80001f0 <main+0x28>
 80001f4:	40000400 	.word	0x40000400

080001f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001fc:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <SystemInit+0x20>)
 80001fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000202:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <SystemInit+0x20>)
 8000204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022a:	2b00      	cmp	r3, #0
 800022c:	db0c      	blt.n	8000248 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 021f 	and.w	r2, r3, #31
 8000234:	4907      	ldr	r1, [pc, #28]	@ (8000254 <__NVIC_ClearPendingIRQ+0x38>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	095b      	lsrs	r3, r3, #5
 800023c:	2001      	movs	r0, #1
 800023e:	fa00 f202 	lsl.w	r2, r0, r2
 8000242:	3360      	adds	r3, #96	@ 0x60
 8000244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	6039      	str	r1, [r7, #0]
 8000262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000268:	2b00      	cmp	r3, #0
 800026a:	db0a      	blt.n	8000282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	b2da      	uxtb	r2, r3
 8000270:	490c      	ldr	r1, [pc, #48]	@ (80002a4 <__NVIC_SetPriority+0x4c>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	0112      	lsls	r2, r2, #4
 8000278:	b2d2      	uxtb	r2, r2
 800027a:	440b      	add	r3, r1
 800027c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000280:	e00a      	b.n	8000298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4908      	ldr	r1, [pc, #32]	@ (80002a8 <__NVIC_SetPriority+0x50>)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	f003 030f 	and.w	r3, r3, #15
 800028e:	3b04      	subs	r3, #4
 8000290:	0112      	lsls	r2, r2, #4
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	440b      	add	r3, r1
 8000296:	761a      	strb	r2, [r3, #24]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <rcc_SysClock_Config>:
 * 		    HCLK   168 MHz
 * 		    APB1    42 MHz
 *		    APB2    84 MHz
 */
void rcc_SysClock_Config(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	// enable HSE
	RCC->CR |= RCC_CR_HSEON;               // HSE on
 80002b0:	4b2e      	ldr	r3, [pc, #184]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a2d      	ldr	r2, [pc, #180]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002ba:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)) {;} // wait for it
 80002bc:	bf00      	nop
 80002be:	4b2b      	ldr	r3, [pc, #172]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <rcc_SysClock_Config+0x12>

	// select HSE as PLL source
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC_HSE);
 80002ca:	4b28      	ldr	r3, [pc, #160]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	4a27      	ldr	r2, [pc, #156]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002d4:	6053      	str	r3, [r2, #4]

	// PLL prescalers
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLM); // clear previous
 80002d6:	4b25      	ldr	r3, [pc, #148]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002d8:	685a      	ldr	r2, [r3, #4]
 80002da:	4924      	ldr	r1, [pc, #144]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002dc:	4b24      	ldr	r3, [pc, #144]	@ (8000370 <rcc_SysClock_Config+0xc4>)
 80002de:	4013      	ands	r3, r2
 80002e0:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |=  (0 << RCC_PLLCFGR_PLLP_Pos)                               // PLLP =   2
 80002e2:	4b22      	ldr	r3, [pc, #136]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002e4:	685a      	ldr	r2, [r3, #4]
 80002e6:	4921      	ldr	r1, [pc, #132]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002e8:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <rcc_SysClock_Config+0xc8>)
 80002ea:	4313      	orrs	r3, r2
 80002ec:	604b      	str	r3, [r1, #4]
	             |   (336 << RCC_PLLCFGR_PLLN_Pos)                             // PLLN = 336
			     |   (8 << RCC_PLLCFGR_PLLM_Pos)                               // PLLM =   8
			     |   (7 << RCC_PLLCFGR_PLLQ_Pos);                              // PLLQ =   7

	// enable main PLL
	RCC->CR |= RCC_CR_PLLON;               // main PLL on
 80002ee:	4b1f      	ldr	r3, [pc, #124]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a1e      	ldr	r2, [pc, #120]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002f8:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)) {;} // wait for it
 80002fa:	bf00      	nop
 80002fc:	4b1b      	ldr	r3, [pc, #108]	@ (800036c <rcc_SysClock_Config+0xc0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <rcc_SysClock_Config+0x50>

	// APB1, APB2, AHB prescalers
	RCC->CFGR &= ~(RCC_CFGR_PPRE2 | RCC_CFGR_PPRE1); // clear previous
 8000308:	4b18      	ldr	r3, [pc, #96]	@ (800036c <rcc_SysClock_Config+0xc0>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a17      	ldr	r2, [pc, #92]	@ (800036c <rcc_SysClock_Config+0xc0>)
 800030e:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000312:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (0b100 << RCC_CFGR_PPRE2_Pos)      // APB2 prescalers = 2
 8000314:	4b15      	ldr	r3, [pc, #84]	@ (800036c <rcc_SysClock_Config+0xc0>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a14      	ldr	r2, [pc, #80]	@ (800036c <rcc_SysClock_Config+0xc0>)
 800031a:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 800031e:	6093      	str	r3, [r2, #8]
	          |   (0b101 << RCC_CFGR_PPRE1_Pos);     // APB1 prescalers = 4
	RCC->CFGR &= ~ RCC_CFGR_HPRE;                    // AHB not divided
 8000320:	4b12      	ldr	r3, [pc, #72]	@ (800036c <rcc_SysClock_Config+0xc0>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a11      	ldr	r2, [pc, #68]	@ (800036c <rcc_SysClock_Config+0xc0>)
 8000326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800032a:	6093      	str	r3, [r2, #8]

	// proper flash latency for SYSCLK = 168 MHz
	FLASH->ACR &= ~ FLASH_ACR_LATENCY;     // clear previous
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <rcc_SysClock_Config+0xcc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a11      	ldr	r2, [pc, #68]	@ (8000378 <rcc_SysClock_Config+0xcc>)
 8000332:	f023 0307 	bic.w	r3, r3, #7
 8000336:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=   FLASH_ACR_LATENCY_5WS; // 5 wait states for 168 MHz
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <rcc_SysClock_Config+0xcc>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0e      	ldr	r2, [pc, #56]	@ (8000378 <rcc_SysClock_Config+0xcc>)
 800033e:	f043 0305 	orr.w	r3, r3, #5
 8000342:	6013      	str	r3, [r2, #0]

	// PLL selected as system clock
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000344:	4b09      	ldr	r3, [pc, #36]	@ (800036c <rcc_SysClock_Config+0xc0>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4a08      	ldr	r2, [pc, #32]	@ (800036c <rcc_SysClock_Config+0xc0>)
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	6093      	str	r3, [r2, #8]
	while (!(RCC->CFGR & RCC_CFGR_SWS)) {;}  // wait for it
 8000350:	bf00      	nop
 8000352:	4b06      	ldr	r3, [pc, #24]	@ (800036c <rcc_SysClock_Config+0xc0>)
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	f003 030c 	and.w	r3, r3, #12
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <rcc_SysClock_Config+0xa6>
}
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40023800 	.word	0x40023800
 8000370:	fffc8000 	.word	0xfffc8000
 8000374:	07005408 	.word	0x07005408
 8000378:	40023c00 	.word	0x40023c00

0800037c <rcc_SysTick_Config>:
/*
 * @brief : SysTick Timer Configuration
 * @note  : adjusted in 1ms regarding 168 MHz system clock
 */
void rcc_SysTick_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	// clear control register to disable SysTick at beginning
	SysTick->CTRL = 0;
 8000380:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <rcc_SysTick_Config+0x30>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]

	// set reload value regarding SYSCLK value (168 MHz)
	SysTick->LOAD = 168000 - 1;
 8000386:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <rcc_SysTick_Config+0x30>)
 8000388:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <rcc_SysTick_Config+0x34>)
 800038a:	605a      	str	r2, [r3, #4]

	// priority SysTick interrupt
	NVIC_SetPriority(SysTick_IRQn, 0);
 800038c:	2100      	movs	r1, #0
 800038e:	f04f 30ff 	mov.w	r0, #4294967295
 8000392:	f7ff ff61 	bl	8000258 <__NVIC_SetPriority>

	// reset SysTick value to zero
	SysTick->VAL = 0;
 8000396:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <rcc_SysTick_Config+0x30>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]

	// enable SysTick from CTRL
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk    // enable SysTick counter
 800039c:	4b03      	ldr	r3, [pc, #12]	@ (80003ac <rcc_SysTick_Config+0x30>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a02      	ldr	r2, [pc, #8]	@ (80003ac <rcc_SysTick_Config+0x30>)
 80003a2:	f043 0307 	orr.w	r3, r3, #7
 80003a6:	6013      	str	r3, [r2, #0]
	              |  SysTick_CTRL_CLKSOURCE_Msk // CPU clock as SysTick source
			      |  SysTick_CTRL_TICKINT_Msk;  // enable interrupt
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	e000e010 	.word	0xe000e010
 80003b0:	0002903f 	.word	0x0002903f

080003b4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	// clear pending
	NVIC_ClearPendingIRQ(SysTick_IRQn);
 80003b8:	f04f 30ff 	mov.w	r0, #4294967295
 80003bc:	f7ff ff2e 	bl	800021c <__NVIC_ClearPendingIRQ>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <tim_TIM3_3PWM_Config>:
 *          Center aligned mode 3
 *          Frequency 25 KHz
 *          PWM mode 1
 */
void tim_TIM3_3PWM_Config(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	// enable clocks for GPIOA and GPIOB
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 80003c8:	4b4c      	ldr	r3, [pc, #304]	@ (80004fc <tim_TIM3_3PWM_Config+0x138>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a4b      	ldr	r2, [pc, #300]	@ (80004fc <tim_TIM3_3PWM_Config+0x138>)
 80003ce:	f043 0303 	orr.w	r3, r3, #3
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA6, PA7 to alternate function (TIM3_CH1, TIM3_CH2) AF2
	GPIOA->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 80003d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a49      	ldr	r2, [pc, #292]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 80003da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80003de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1); // Alternate Function
 80003e0:	4b47      	ldr	r3, [pc, #284]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a46      	ldr	r2, [pc, #280]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 80003e6:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80003ea:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 80003ec:	4b44      	ldr	r3, [pc, #272]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 80003ee:	6a1b      	ldr	r3, [r3, #32]
 80003f0:	4a43      	ldr	r2, [pc, #268]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 80003f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80003f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  ((0x2 << (6 * 4)) | (0x2 << (7 * 4))); // AF2 for TIM3
 80003f8:	4b41      	ldr	r3, [pc, #260]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a40      	ldr	r2, [pc, #256]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 80003fe:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000402:	6213      	str	r3, [r2, #32]

	// set PB0 to alternate function (TIM3_CH3) AF2
	GPIOB->MODER &= ~(GPIO_MODER_MODER0);
 8000404:	4b3f      	ldr	r3, [pc, #252]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a3e      	ldr	r2, [pc, #248]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 800040a:	f023 0303 	bic.w	r3, r3, #3
 800040e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (GPIO_MODER_MODER0_1); // Alternate Function
 8000410:	4b3c      	ldr	r3, [pc, #240]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a3b      	ldr	r2, [pc, #236]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0xF << (0 * 4));
 800041c:	4b39      	ldr	r3, [pc, #228]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	4a38      	ldr	r2, [pc, #224]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 8000422:	f023 030f 	bic.w	r3, r3, #15
 8000426:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  (0x2 << (0 * 4)); // AF2 for TIM3
 8000428:	4b36      	ldr	r3, [pc, #216]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	4a35      	ldr	r2, [pc, #212]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 800042e:	f043 0302 	orr.w	r3, r3, #2
 8000432:	6213      	str	r3, [r2, #32]

	// set speed, push-pull
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR7;
 8000434:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4a31      	ldr	r2, [pc, #196]	@ (8000500 <tim_TIM3_3PWM_Config+0x13c>)
 800043a:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 800043e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0;
 8000440:	4b30      	ldr	r3, [pc, #192]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a2f      	ldr	r2, [pc, #188]	@ (8000504 <tim_TIM3_3PWM_Config+0x140>)
 8000446:	f043 0303 	orr.w	r3, r3, #3
 800044a:	6093      	str	r3, [r2, #8]

	// enable TIM3 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800044c:	4b2b      	ldr	r3, [pc, #172]	@ (80004fc <tim_TIM3_3PWM_Config+0x138>)
 800044e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000450:	4a2a      	ldr	r2, [pc, #168]	@ (80004fc <tim_TIM3_3PWM_Config+0x138>)
 8000452:	f043 0302 	orr.w	r3, r3, #2
 8000456:	6413      	str	r3, [r2, #64]	@ 0x40

	// center aligned mode 3
	TIM3->CR1 &= ~TIM_CR1_CMS;
 8000458:	4b2b      	ldr	r3, [pc, #172]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a2a      	ldr	r2, [pc, #168]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 800045e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000462:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |=  TIM_CR1_CMS_1 | TIM_CR1_CMS_0; // CMS = 11
 8000464:	4b28      	ldr	r3, [pc, #160]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a27      	ldr	r2, [pc, #156]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 800046a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800046e:	6013      	str	r3, [r2, #0]

	// set auto reload value and prescaler
	TIM3->ARR = 1680 - 1; // because of APB1 clock is 168 MHz and center aligned mode 3
 8000470:	4b25      	ldr	r3, [pc, #148]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 8000472:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000476:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 0;
 8000478:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 800047a:	2200      	movs	r2, #0
 800047c:	629a      	str	r2, [r3, #40]	@ 0x28

	// configure CH1, CH2 in CCMR1 (PWM mode 1, preload enable)
	TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a21      	ldr	r2, [pc, #132]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 8000484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800048c:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=  (6 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;
 800048e:	4b1e      	ldr	r3, [pc, #120]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a1d      	ldr	r2, [pc, #116]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 8000494:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000498:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=  (6 << TIM_CCMR1_OC2M_Pos) | TIM_CCMR1_OC2PE;
 800049a:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a1a      	ldr	r2, [pc, #104]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004a0:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80004a4:	6193      	str	r3, [r2, #24]

	// configure CH3 in CCMR2
	TIM3->CCMR2 &= ~TIM_CCMR2_OC3M;
 80004a6:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a17      	ldr	r2, [pc, #92]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80004b0:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= (6 << TIM_CCMR2_OC3M_Pos) | TIM_CCMR2_OC3PE;
 80004b2:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004b8:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80004bc:	61d3      	str	r3, [r2, #28]

	// enable outputs
	TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E;
 80004be:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004c0:	6a1b      	ldr	r3, [r3, #32]
 80004c2:	4a11      	ldr	r2, [pc, #68]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004c4:	f443 7388 	orr.w	r3, r3, #272	@ 0x110
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6213      	str	r3, [r2, #32]

	// enable auto reload preload
	TIM3->CR1 |= TIM_CR1_ARPE;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004d8:	6013      	str	r3, [r2, #0]

	// force update to load registers
	TIM3->EGR |= TIM_EGR_UG;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a0a      	ldr	r2, [pc, #40]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6153      	str	r3, [r2, #20]

	// start timer
	TIM3->CR1 |= TIM_CR1_CEN;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a07      	ldr	r2, [pc, #28]	@ (8000508 <tim_TIM3_3PWM_Config+0x144>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40023800 	.word	0x40023800
 8000500:	40020000 	.word	0x40020000
 8000504:	40020400 	.word	0x40020400
 8000508:	40000400 	.word	0x40000400

0800050c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800050c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000544 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000510:	f7ff fe72 	bl	80001f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	@ (8000548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	@ (800054c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	@ (8000558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800053a:	f000 f811 	bl	8000560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800053e:	f7ff fe43 	bl	80001c8 <main>
  bx  lr    
 8000542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000550:	080005c8 	.word	0x080005c8
  ldr r2, =_sbss
 8000554:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000558:	2000001c 	.word	0x2000001c

0800055c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC_IRQHandler>
	...

08000560 <__libc_init_array>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	4d0d      	ldr	r5, [pc, #52]	@ (8000598 <__libc_init_array+0x38>)
 8000564:	4c0d      	ldr	r4, [pc, #52]	@ (800059c <__libc_init_array+0x3c>)
 8000566:	1b64      	subs	r4, r4, r5
 8000568:	10a4      	asrs	r4, r4, #2
 800056a:	2600      	movs	r6, #0
 800056c:	42a6      	cmp	r6, r4
 800056e:	d109      	bne.n	8000584 <__libc_init_array+0x24>
 8000570:	4d0b      	ldr	r5, [pc, #44]	@ (80005a0 <__libc_init_array+0x40>)
 8000572:	4c0c      	ldr	r4, [pc, #48]	@ (80005a4 <__libc_init_array+0x44>)
 8000574:	f000 f818 	bl	80005a8 <_init>
 8000578:	1b64      	subs	r4, r4, r5
 800057a:	10a4      	asrs	r4, r4, #2
 800057c:	2600      	movs	r6, #0
 800057e:	42a6      	cmp	r6, r4
 8000580:	d105      	bne.n	800058e <__libc_init_array+0x2e>
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f855 3b04 	ldr.w	r3, [r5], #4
 8000588:	4798      	blx	r3
 800058a:	3601      	adds	r6, #1
 800058c:	e7ee      	b.n	800056c <__libc_init_array+0xc>
 800058e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000592:	4798      	blx	r3
 8000594:	3601      	adds	r6, #1
 8000596:	e7f2      	b.n	800057e <__libc_init_array+0x1e>
 8000598:	080005c0 	.word	0x080005c0
 800059c:	080005c0 	.word	0x080005c0
 80005a0:	080005c0 	.word	0x080005c0
 80005a4:	080005c4 	.word	0x080005c4

080005a8 <_init>:
 80005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005aa:	bf00      	nop
 80005ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ae:	bc08      	pop	{r3}
 80005b0:	469e      	mov	lr, r3
 80005b2:	4770      	bx	lr

080005b4 <_fini>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr
